schema {
  query: Query
  subscription: Subscription
}

type BodyPartsSpoofCheck {
  performed: Boolean!
  photoInHandsDetected: Boolean!
  passed: Boolean!
}

type Camera {
  serviceVideoSlots(where: ServiceVideoSlotFilterInput order: [ServiceVideoSlotSortInput!]): [ServiceVideoSlot]
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  streamWorker(where: WorkerFilterInput order: [WorkerSortInput!]): Worker
  videoPublishWorker(where: WorkerFilterInput order: [WorkerSortInput!]): Worker
  mPEG1PreviewEnabled: Boolean!
  mPEG1PreviewPort: Int!
  mPEG1VideoBitrate: Int!
  id: UUID!
  streamId: UUID!
  streamWorkerId: Long!
  videoPublishWorkerId: Long!
  createdAt: DateTime!
  updatedAt: DateTime
  cameraSpoofDetectorResources: [StreamSpoofDetectorResource]
  source: String
  trackMinFaceSize: Int!
  trackMaxFaceSize: Int!
  maxTrackingFaces: Int!
  faceDetectionConfidenceThreshold: Int!
  trackMinPedestrianSize: Float!
  trackMaxPedestrianSize: Float!
  maxTrackingPedestrians: Int!
  pedestrianDetectionConfidenceThreshold: Int!
  trackMinPalmSize: Float!
  trackMaxPalmSize: Float!
  maxTrackingPalms: Int!
  palmDetectionConfidenceThreshold: Int!
  palmDetectorResourceId: String
  palmExtractorResourceId: String
  trackMinObjectSize: Float!
  trackMaxObjectSize: Float!
  maxTrackingObjects: Int!
  objectDetectionConfidenceThreshold: Int!
  spoofDetectorExternalScoreThreshold: Float!
  spoofDetectorDistantLivenessScoreThreshold: Float!
  spoofDetectorNearbyLivenessScoreThreshold: Float!
  spoofDetectorDistantLivenessConditions: String
  spoofDetectorNearbyLivenessConditions: String
  faceDetectorResourceId: String
  templateGeneratorResourceId: String
  pedestrianDetectorResourceId: String
  objectDetectorResourceId: String
  pedestrianExtractorResourceId: String
  redetectionTime: Int!
  templateGenerationTime: Int!
  trackMotionOptimization: String
  trackSpeedAccuracyMode: String
  faceSaveStrategy: FaceSaveStrategy!
  pedestrianSaveStrategy: PedestrianSaveStrategy!
  objectSaveStrategy: ObjectSaveStrategy!
  maskImagePath: String
  saveFrameImageData: Boolean!
  imageQuality: Int!
  previewMaxDimension: Int!
  renderOrder: Boolean!
  renderSize: Boolean!
  renderQuality: Boolean!
  renderYawAngle: Boolean!
  renderPitchAngle: Boolean!
  renderRollAngle: Boolean!
  renderWatchlistMemberId: Boolean!
  renderWatchlistMemberName: Boolean!
  renderWatchlistName: Boolean!
  renderMatchingScore: Boolean!
  renderAge: Boolean!
  renderGender: Boolean!
  renderTemplateQuality: Boolean!
  renderFaceMaskStatus: Boolean!
  renderFaceMaskConfidence: Boolean!
  renderSharpness: Boolean!
  renderBrightness: Boolean!
  renderTintedGlasses: Boolean!
  renderHeavyFrame: Boolean!
  renderGlassStatus: Boolean!
  textFontSize: Int!
  detectCar: Boolean!
  detectBus: Boolean!
  detectTruck: Boolean!
  detectMotorcycle: Boolean!
  detectBicycle: Boolean!
  detectBoat: Boolean!
  detectAirplane: Boolean!
  detectTrain: Boolean!
  detectBird: Boolean!
  detectCat: Boolean!
  detectDog: Boolean!
  detectHorse: Boolean!
  detectSheep: Boolean!
  detectCow: Boolean!
  detectBear: Boolean!
  detectElephant: Boolean!
  detectGiraffe: Boolean!
  detectZebra: Boolean!
  detectSuitcase: Boolean!
  detectBackpack: Boolean!
  detectHandbag: Boolean!
  detectUmbrella: Boolean!
  detectKnife: Boolean!
}

"A segment of a collection."
type CamerasCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Camera]
  totalCount: Int!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type CropCoordinates {
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
}

type EdgeStream {
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  settings: EdgeStreamSettings
  id: UUID!
  clientId: String
  enabled: Boolean!
  saveFrameImageData: Boolean!
  templateGeneratorResourceId: String
  faceSaveStrategy: FaceSaveStrategy!
  objectSaveStrategy: ObjectSaveStrategy!
  createdAt: DateTime!
  updatedAt: DateTime
  streamId: UUID!
  scopeId: UUID!
  spoofDetectorDistantLivenessScoreThreshold: Float!
  spoofDetectorNearbyLivenessScoreThreshold: Float!
  spoofDetectorDistantLivenessConditions: String
  spoofDetectorNearbyLivenessConditions: String
  watchlistSyncOption: WatchlistSyncOption!
  edgeStreamSpoofDetectorResources: [StreamSpoofDetectorResource]
  watchlists: [Watchlist]
}

type EdgeStreamFaceDetectionCropSettings {
  enable: Boolean!
  maxSize: Float!
  imageFormat: EdgeStreamImageFormat!
  imageQuality: Float!
}

type EdgeStreamFaceDetectionSettings {
  tracking: EdgeStreamFaceDetectionTrackingSettings
  crop: EdgeStreamFaceDetectionCropSettings
  enable: Boolean!
  maxDetections: Int!
  minFaceSize: Float!
  maxFaceSize: Float!
  orderBy: EdgeStreamFaceDetectionOrderBy!
}

type EdgeStreamFaceDetectionTrackingSettings {
  outputThreshold: Float!
  inputThreshold: Float!
  stability: Float!
  maxFramesLost: Int!
}

type EdgeStreamFaceExtractionSettings {
  enable: Boolean!
}

type EdgeStreamFaceIdentificationSettings {
  enable: Boolean!
  threshold: Float!
}

type EdgeStreamFaceLivenessPassiveCondition {
  edgeStreamId: UUID!
  parameter: EdgeStreamFaceLivenessConditionParameter!
  lowerThreshold: Float
  upperThreshold: Float
}

type EdgeStreamFaceLivenessPassiveSettings {
  enable: Boolean!
  strategy: EdgeStreamLivenessStrategy!
  conditions: [EdgeStreamFaceLivenessPassiveCondition!]!
}

type EdgeStreamFullFrameSettings {
  imageWidth: Int
  imageHeight: Int
  imageFormat: EdgeStreamImageFormat!
  imageQuality: Float!
}

type EdgeStreamMessagingSettings {
  enable: Boolean!
  strategy: EdgeStreamMessagingStrategy!
  interval: Int!
  allowEmptyMessages: Boolean!
  identifiedOnly: Boolean!
}

type EdgeStreamPalmDetectionSettings {
  id: UUID!
  enable: Boolean!
  maxDetections: Int!
  boundingBoxExtension: Float!
  tracking: EdgeStreamPalmDetectionTrackingSettings!
}

type EdgeStreamPalmDetectionTrackingSettings {
  id: UUID!
  outputThreshold: Float!
  inputThreshold: Float!
  stability: Float!
  maxFramesLost: Int!
}

type EdgeStreamSettings {
  faceDetection: EdgeStreamFaceDetectionSettings
  faceExtraction: EdgeStreamFaceExtractionSettings
  faceLivenessPassive: EdgeStreamFaceLivenessPassiveSettings
  faceIdentification: EdgeStreamFaceIdentificationSettings
  messaging: EdgeStreamMessagingSettings
  fullFrame: EdgeStreamFullFrameSettings
  visualCodeDetection: EdgeStreamVisualCodeDetectionSettings!
  palmDetection: EdgeStreamPalmDetectionSettings!
}

type EdgeStreamVisualCodeDetectionSettings {
  id: UUID!
  enable: Boolean!
  maxDetections: Int!
  boundingBoxExtension: Float!
  tracking: EdgeStreamVisualCodeDetectionTrackingSettings!
}

type EdgeStreamVisualCodeDetectionTrackingSettings {
  id: UUID!
  outputThreshold: Float!
  inputThreshold: Float!
  stability: Float!
  maxFramesLost: Int!
}

"A segment of a collection."
type EdgeStreamsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [EdgeStream]
  totalCount: Int!
}

type ExternalSpoofCheck {
  performed: Boolean!
  passed: Boolean!
  score: Float!
  quality: Float!
}

type Face {
  searchSessionObjects(where: SearchSessionObjectFilterInput order: [SearchSessionObjectSortInput!]): [SearchSessionObject]
  matchResults(where: MatchResultFilterInput order: [MatchResultSortInput!]): [MatchResult]
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  spoofCheckResult(where: SpoofCheckResultFilterInput order: [SpoofCheckResultSortInput!]): SpoofCheckResult
  template: ByteArray
  objectType: Int!
  faceState: FaceState!
  templateVersion: String
  templateQuality: Int
  leftEyeX: Float
  leftEyeY: Float
  rightEyeX: Float
  rightEyeY: Float
  faceType: FaceType!
  autolearnClusterType: AutolearnClusterType
  age: Float
  gender: Float
  faceMaskConfidence: Float
  noseTipConfidence: Float
  sharpness: Float
  brightness: Float
  heavyFrame: Float
  glassStatus: Float
  tintedGlasses: Float
  faceMaskStatus: FaceMaskStatus!
  faceAreaChange: Float!
  faceArea: Float
  faceOrder: Int
  facesOnFrameCount: Int
  state: FaceState!
  type: FaceType!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  pedestrianId: UUID
  pedestrian: Pedestrian
  genderFormatted: GenderType
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  areaOnFrame: Float
  size: Float!
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  updatedAt: DateTime
  createdAt: DateTime!
  processedAt: DateTime
  tracklet: Tracklet
  frame: Frame
  objectAttributes: [ObjectAttribute]
}

type FaceCreatedNotificationDTO {
  type: FaceType!
  state: FaceState!
  createdAt: DateTime!
  updatedAt: DateTime
  leftEyeX: Float
  leftEyeY: Float
  rightEyeX: Float
  rightEyeY: Float
  age: Float
  gender: Float
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
  faceArea: Float
  faceOrder: Int
  facesOnFrameCount: Int
  faceAreaChange: Float!
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  size: Float!
  areaOnFrame: Float
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  processedAt: DateTime
}

type FaceExtractedNotificationDTO {
  id: UUID!
  type: FaceType!
  trackletId: UUID!
  streamId: UUID
  frameId: UUID!
  state: FaceState!
  imageDataId: UUID
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  leftEyeX: Float
  leftEyeY: Float
  rightEyeX: Float
  rightEyeY: Float
  quality: Int!
  templateQuality: Int
  age: Float
  gender: Float
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  faceArea: Float
  size: Float!
  faceOrder: Int
  facesOnFrameCount: Int
  faceAreaChange: Float!
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
}

type FaceInformation {
  cropImage: ByteArray
  id: UUID!
  faceArea: Float!
  faceSize: Float!
  faceOrder: Int!
  facesOnFrameCount: Int!
  faceAreaChange: Float!
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  trackletId: UUID!
  faceQuality: Int!
  templateQuality: Int!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
  age: Float
  gender: Float
  leftEyeX: Float!
  leftEyeY: Float!
  rightEyeX: Float!
  rightEyeY: Float!
  cropCoordinates: CropCoordinates!
}

type FaceModalityInfo {
  faceInformation: FaceInformation!
  faceMatchInfo: MatchInfo!
  spoofResult: SpoofResult!
}

type FaceProcessedNotificationDTO {
  faceInformation: FaceInformation
  spoofCheck: SpoofCheck
  matchInformation: [MatchInformation!]!
  frameInformation: FrameInformation!
}

"A segment of a collection."
type FacesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Face]
  totalCount: Int!
}

type FailedConditionInfo {
  attributeName: String
  attributeValue: Float
  rangeMin: Float!
  rangeMax: Float!
}

type Frame {
  faces(where: FaceFilterInput order: [FaceSortInput!]): [Face]
  pedestrians(where: PedestrianFilterInput order: [PedestrianSortInput!]): [Pedestrian]
  genericObjects(where: GenericObjectFilterInput order: [GenericObjectSortInput!]): [GenericObject]
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  scope(where: ScopeFilterInput order: [ScopeSortInput!]): Scope
  state: FrameState!
  scopeId: UUID!
  streamId: UUID
  imageDataId: UUID
  createdAt: DateTime!
  updatedAt: DateTime
  receivedAt: DateTime
  id: UUID!
  positionInMs: Long!
}

type FrameInformation {
  streamId: UUID!
  frameId: UUID
  processedAt: DateTime!
  clientId: String
  frameTimestampMicroseconds: Long!
}

"A segment of a collection."
type FramesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Frame]
  totalCount: Int!
}

type GenericObject {
  matchResults(where: MatchResultFilterInput order: [MatchResultSortInput!]): [MatchResult]
  tracklet(where: TrackletFilterInput order: [TrackletSortInput!]): Tracklet
  frame(where: FrameFilterInput order: [FrameSortInput!]): Frame
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  palmTemplate: ByteArray
  genericObjectType: Int!
  objectType: Int!
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  areaOnFrame: Float
  size: Float!
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  updatedAt: DateTime
  createdAt: DateTime!
  processedAt: DateTime
  objectAttributes: [ObjectAttribute]
}

"A segment of a collection."
type GenericObjectsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [GenericObject]
  totalCount: Int!
}

type GroupingMetadata {
  individuals(where: IndividualFilterInput order: [IndividualSortInput!]): [Individual]
  scope(where: ScopeFilterInput order: [ScopeSortInput!]): Scope
  id: Long!
  scopeId: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime
  state: GroupingState!
  isDefault: Boolean!
  nextIterationTimeStamp: DateTime
  enabled: Boolean!
  groupingStep: Int!
  slidingWindow: Int!
  groupingStrategy: String
  groupingThreshold: Int!
}

"A segment of a collection."
type GroupingMetadataCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [GroupingMetadata]
  totalCount: Int!
}

type HealthReport {
  version: String
  status: HealthStatus!
  licenseStatus: LicenseStatus!
  hwid: String
}

type IdentificationEventNotificationDTO {
  identificationEventType: IdentificationEventType!
  streamInformation: StreamInformation!
  frameInformation: IdentificationFrameInformation!
  memberDetails: MemberDetails
  modality: Modality!
  faceModalityInfo: FaceModalityInfo
  opticalCodeModalityInfo: OpticalCodeModalityInfo
  palmModalityInfo: PalmModalityInfo
}

type IdentificationFrameInformation {
  id: UUID!
  imageDataId: UUID
  timestamp: DateTime!
  timestampMicroseconds: Long!
  width: Int!
  height: Int!
}

type Individual {
  tracklets(where: TrackletFilterInput order: [TrackletSortInput!]): [Tracklet]
  id: UUID!
  groupingMetadataId: Long!
  createdAt: DateTime!
  updatedAt: DateTime
  entranceTime: DateTime
  exitTime: DateTime
  hidden: Boolean!
  groupingMetadata: GroupingMetadata
}

"A segment of a collection."
type IndividualsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Individual]
  totalCount: Int!
}

type LivenessSpoofCheck {
  performed: Boolean!
  passed: Boolean!
  score: Float!
  failedConditions: [FailedConditionInfo]
}

type LivenessSpoofResult {
  evaluationRequested: Boolean!
  evaluationPerformed: Boolean!
  evaluationPassed: Boolean!
  failedConditions: [FailedConditionInfo!]!
  score: Float!
}

type MatchInfo {
  matchResults: [MatchResultInfo!]!
}

type MatchInformation {
  id: UUID!
  score: Int!
  watchlistMemberId: String!
  displayName: String
  fullName: String
  watchlistDisplayName: String!
  watchlistFullName: String!
  watchlistId: String!
  labels: [MemberLabel!]!
  watchlistPreviewColor: String
}

type MatchResult {
  watchlistMember(where: WatchlistMemberFilterInput order: [WatchlistMemberSortInput!]): WatchlistMember
  watchlist(where: WatchlistFilterInput order: [WatchlistSortInput!]): Watchlist
  frame(where: FrameFilterInput order: [FrameSortInput!]): Frame
  tracklet(where: TrackletFilterInput order: [TrackletSortInput!]): Tracklet
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  face(where: FaceFilterInput order: [FaceSortInput!]): Face
  id: UUID!
  type: MatchResultType!
  watchlistMemberId: String
  streamId: UUID!
  score: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime!
  trackletId: UUID!
  watchlistMemberFullName: String
  watchlistMemberDisplayName: String
  watchlistFullName: String
  watchlistDisplayName: String
  watchlistId: String
  previewColor: String
  faceId: UUID
  genericObjectId: UUID
  frameId: UUID
  faceArea: Float
  faceSize: Float!
  faceOrder: Int
  facesOnFrameCount: Int
  faceAreaChange: Float!
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  templateQuality: Int
  age: Float
  gender: Float
  faceQuality: Int
  sharpness: Float
  brightness: Float
  heavyFrame: Float
  glassStatus: Float
  tintedGlasses: Float
  genericObject: GenericObject
}

type MatchResultInfo {
  matchResultId: UUID!
  score: Int!
  watchlist: WatchlistInfo!
}

type MatchResultInsertDTO {
  score: Int!
  watchlistMemberId: String
  watchlistMemberFullName: String
  watchlistMemberDisplayName: String
  watchlistId: String
  watchlistFullName: String
  watchlistDisplayName: String
  previewColor: String
  labels: [MemberLabel]
  id: UUID!
  type: MatchResultType!
  streamId: UUID!
  frameId: UUID
  clientId: String
  faceArea: Float!
  faceSize: Float!
  faceOrder: Int!
  facesOnFrameCount: Int!
  faceAreaChange: Float!
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime
  trackletId: UUID!
  faceId: UUID!
  templateQuality: Int!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
  faceQuality: Int!
  age: Float
  gender: Float
}

type MatchResultNotificationDTO {
  cropImage: ByteArray
  spoofCheck: SpoofCheck
  traceOperationName: String
  frameTimestampMicroseconds: Long!
  leftEyeX: Float!
  leftEyeY: Float!
  rightEyeX: Float!
  rightEyeY: Float!
  score: Int!
  watchlistMemberId: String
  watchlistMemberFullName: String
  watchlistMemberDisplayName: String
  watchlistId: String
  watchlistFullName: String
  watchlistDisplayName: String
  previewColor: String
  labels: [MemberLabel]
  id: UUID!
  type: MatchResultType!
  streamId: UUID!
  frameId: UUID
  clientId: String
  faceArea: Float!
  faceSize: Float!
  faceOrder: Int!
  facesOnFrameCount: Int!
  faceAreaChange: Float!
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime
  trackletId: UUID!
  faceId: UUID!
  templateQuality: Int!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
  faceQuality: Int!
  age: Float
  gender: Float
}

"A segment of a collection."
type MatchResultsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [MatchResult]
  totalCount: Int!
}

type MemberDetails {
  id: String!
  displayName: String
  fullName: String
  labels: [MemberLabel!]!
  matchedWatchlists: [WatchlistInfo!]!
}

type MemberLabel {
  key: String
  value: String
}

type NoMatchResultNotificationDTO {
  cropImage: ByteArray
  traceOperationName: String
  frameTimestampMicroseconds: Long!
  leftEyeX: Float!
  leftEyeY: Float!
  rightEyeX: Float!
  rightEyeY: Float!
  id: UUID!
  type: MatchResultType!
  streamId: UUID!
  frameId: UUID
  clientId: String
  faceArea: Float!
  faceSize: Float!
  faceOrder: Int!
  facesOnFrameCount: Int!
  faceAreaChange: Float!
  faceMaskConfidence: Float
  noseTipConfidence: Float
  faceMaskStatus: FaceMaskStatus!
  createdAt: DateTime!
  updatedAt: DateTime
  processedAt: DateTime
  trackletId: UUID!
  faceId: UUID!
  templateQuality: Int!
  yawAngle: Float
  pitchAngle: Float
  rollAngle: Float
  brightness: Float
  sharpness: Float
  tintedGlasses: Float
  heavyFrame: Float
  glassStatus: Float
  faceQuality: Int!
  age: Float
  gender: Float
}

type ObjectAttribute {
  type: AttributeType!
  floatValue: Float
  boolValue: Boolean
  visualObjectId: UUID!
}

type ObjectAttributeNotification {
  type: AttributeType!
  floatValue: Float
  boolValue: Boolean
}

"A segment of a collection."
type ObjectAttributesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ObjectAttribute]
  totalCount: Int!
}

type ObjectInformation {
  cropImage: ByteArray
  id: UUID!
  type: Int!
  trackletId: UUID!
  quality: Int!
  objectOrderOnFrameForType: Int!
  objectsOnFrameCountForType: Int!
  size: Float!
  areaOnFrame: Float!
  cropCoordinates: CropCoordinates!
}

type ObjectInsertNotificationDTO {
  genericObjectType: Int!
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  size: Float!
  areaOnFrame: Float
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  processedAt: DateTime
}

type ObjectProcessedNotificationDTO {
  objectInformation: ObjectInformation
  matchInformation: [MatchInformation!]!
  frameInformation: FrameInformation!
}

type OpticalCodeModalityInfo {
  opticalCodeType: OpticalCodeType!
}

type PalmInformation {
  cropImage: ByteArray
  id: UUID!
  trackletId: UUID!
  area: Float!
  size: Float!
  quality: Int!
  cropCoordinates: CropCoordinates!
}

type PalmModalityInfo {
  palmInformation: PalmInformation!
  matchInfo: MatchInfo!
}

type Pedestrian {
  tracklet(where: TrackletFilterInput order: [TrackletSortInput!]): Tracklet
  frame(where: FrameFilterInput order: [FrameSortInput!]): Frame
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  objectType: Int!
  pose: HumanPose!
  earLeftX: Float
  earLeftY: Float
  earRightX: Float
  earRightY: Float
  eyeLeftX: Float
  eyeLeftY: Float
  eyeRightX: Float
  eyeRightY: Float
  noseX: Float
  noseY: Float
  neckX: Float
  neckY: Float
  shoulderLeftX: Float
  shoulderLeftY: Float
  shoulderRightX: Float
  shoulderRightY: Float
  elbowLeftX: Float
  elbowLeftY: Float
  elbowRightX: Float
  elbowRightY: Float
  wristLeftX: Float
  wristLeftY: Float
  wristRightX: Float
  wristRightY: Float
  hipLeftX: Float
  hipLeftY: Float
  hipRightX: Float
  hipRightY: Float
  kneeLeftX: Float
  kneeLeftY: Float
  kneeRightX: Float
  kneeRightY: Float
  ankleLeftX: Float
  ankleLeftY: Float
  ankleRightX: Float
  ankleRightY: Float
  faceId: UUID
  face: Face
  poses: [String]
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  areaOnFrame: Float
  size: Float!
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  updatedAt: DateTime
  createdAt: DateTime!
  processedAt: DateTime
  objectAttributes: [ObjectAttribute]
}

type PedestrianInformation {
  cropImage: ByteArray
  id: UUID!
  trackletId: UUID!
  quality: Int!
  pedestrianOrder: Int!
  pedestriansOnFrameCount: Int!
  size: Float!
  areaOnFrame: Float!
  attributes: [ObjectAttributeNotification!]!
  cropCoordinates: CropCoordinates!
}

type PedestrianInsertedNotificationDTO {
  pose: HumanPose!
  earLeftX: Float
  earLeftY: Float
  earRightX: Float
  earRightY: Float
  eyeLeftX: Float
  eyeLeftY: Float
  eyeRightX: Float
  eyeRightY: Float
  noseX: Float
  noseY: Float
  neckX: Float
  neckY: Float
  shoulderLeftX: Float
  shoulderLeftY: Float
  shoulderRightX: Float
  shoulderRightY: Float
  elbowLeftX: Float
  elbowLeftY: Float
  elbowRightX: Float
  elbowRightY: Float
  wristLeftX: Float
  wristLeftY: Float
  wristRightX: Float
  wristRightY: Float
  hipLeftX: Float
  hipLeftY: Float
  hipRightX: Float
  hipRightY: Float
  kneeLeftX: Float
  kneeLeftY: Float
  kneeRightX: Float
  kneeRightY: Float
  ankleLeftX: Float
  ankleLeftY: Float
  ankleRightX: Float
  ankleRightY: Float
  objectAttributes: [ObjectAttributeNotification]
  id: UUID!
  imageDataId: UUID
  quality: Int!
  cropLeftTopX: Float!
  cropLeftTopY: Float!
  cropRightTopX: Float!
  cropRightTopY: Float!
  cropLeftBottomX: Float!
  cropLeftBottomY: Float!
  cropRightBottomX: Float!
  cropRightBottomY: Float!
  size: Float!
  areaOnFrame: Float
  objectOrderOnFrameForType: Int
  objectsOnFrameCountForType: Int
  trackletId: UUID!
  frameId: UUID!
  streamId: UUID
  processedAt: DateTime
}

type PedestrianProcessedNotificationDTO {
  pedestrianInformation: PedestrianInformation
  frameInformation: FrameInformation!
}

"A segment of a collection."
type PedestriansCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Pedestrian]
  totalCount: Int!
}

type ProgressMessageDTO {
  id: UUID!
  numNewFrames: Int!
  numUnprocFrames: Int!
  status: ProgressStatus!
}

type Query {
  cameras(skip: Int take: Int where: CameraFilterInput order: [CameraSortInput!]): CamerasCollectionSegment
  edgeStreams(skip: Int take: Int where: EdgeStreamFilterInput order: [EdgeStreamSortInput!]): EdgeStreamsCollectionSegment
  faces(skip: Int take: Int where: FaceFilterInput order: [FaceSortInput!]): FacesCollectionSegment
  frames(skip: Int take: Int where: FrameFilterInput order: [FrameSortInput!]): FramesCollectionSegment
  groupingMetadata(skip: Int take: Int where: GroupingMetadataFilterInput order: [GroupingMetadataSortInput!]): GroupingMetadataCollectionSegment
  individuals(skip: Int take: Int where: IndividualFilterInput order: [IndividualSortInput!]): IndividualsCollectionSegment
  matchResults(skip: Int take: Int where: MatchResultFilterInput order: [MatchResultSortInput!]): MatchResultsCollectionSegment
  pedestrians(skip: Int take: Int where: PedestrianFilterInput order: [PedestrianSortInput!]): PedestriansCollectionSegment
  genericObjects(skip: Int take: Int where: GenericObjectFilterInput order: [GenericObjectSortInput!]): GenericObjectsCollectionSegment
  scopes(skip: Int take: Int where: ScopeFilterInput order: [ScopeSortInput!]): ScopesCollectionSegment
  services(skip: Int take: Int where: ServiceFilterInput order: [ServiceSortInput!]): ServicesCollectionSegment
  streams(skip: Int take: Int where: StreamFilterInput order: [StreamSortInput!]): StreamsCollectionSegment
  tracklets(skip: Int take: Int where: TrackletFilterInput order: [TrackletSortInput!]): TrackletsCollectionSegment
  videoRecords(skip: Int take: Int where: VideoRecordFilterInput order: [VideoRecordSortInput!]): VideoRecordsCollectionSegment
  tags(skip: Int take: Int where: TagFilterInput order: [TagSortInput!]): TagsCollectionSegment
  objectAttributes(skip: Int take: Int where: ObjectAttributeFilterInput order: [ObjectAttributeSortInput!]): ObjectAttributesCollectionSegment
  watchlistMembers(skip: Int take: Int where: WatchlistMemberFilterInput order: [WatchlistMemberSortInput!]): WatchlistMembersCollectionSegment
  watchlists(skip: Int take: Int where: WatchlistFilterInput order: [WatchlistSortInput!]): WatchlistsCollectionSegment
  searchSessions(skip: Int take: Int where: SearchSessionFilterInput order: [SearchSessionSortInput!]): SearchSessionsCollectionSegment
}

type Scope {
  groupingMetadata(where: GroupingMetadataFilterInput order: [GroupingMetadataSortInput!]): [GroupingMetadata]
  tracklets(where: TrackletFilterInput order: [TrackletSortInput!]): [Tracklet]
  frames(where: FrameFilterInput order: [FrameSortInput!]): [Frame]
  streams(where: StreamFilterInput order: [StreamSortInput!]): [Stream]
  id: UUID!
  description: String
  type: ScopeType!
  createdAt: DateTime!
  updatedAt: DateTime
}

"A segment of a collection."
type ScopesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Scope]
  totalCount: Int!
}

type SearchSession {
  searchSessionObjects(where: SearchSessionObjectFilterInput order: [SearchSessionObjectSortInput!]): [SearchSessionObject]
  id: UUID!
  threshold: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type SearchSessionObject {
  searchSessionId: UUID!
  visualObjectId: UUID!
  score: Int!
  face: Face
}

"A segment of a collection."
type SearchSessionsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [SearchSession]
  totalCount: Int!
}

type Service {
  workers(where: WorkerFilterInput order: [WorkerSortInput!]): [Worker]
  serviceVideoSlots(where: ServiceVideoSlotFilterInput order: [ServiceVideoSlotSortInput!]): [ServiceVideoSlot]
  id: Long!
  serviceName: String
  nodeName: String
  createdAt: DateTime!
  updatedAt: DateTime
}

type ServiceVideoSlot {
  id: Long!
  cameraId: UUID
  serviceId: Long!
  createdAt: DateTime!
  updatedAt: DateTime
  camera: Camera
  service: Service
}

"A segment of a collection."
type ServicesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Service]
  totalCount: Int!
}

type SpoofCheck {
  performed: Boolean!
  passed: Boolean!
  bodyPartsSpoofCheck: BodyPartsSpoofCheck
  distantLivenessSpoofCheck: LivenessSpoofCheck
  nearbyLivenessSpoofCheck: LivenessSpoofCheck
  externalSpoofCheck: ExternalSpoofCheck
}

type SpoofCheckResult {
  livenessNearbyFailedConditionsInfo: String @deprecated
  nearbyFailReasons: [FailedConditionInfo]
  livenessDistantFailedConditionsInfo: String @deprecated
  distantFailReasons: [FailedConditionInfo]
  id: UUID!
  livenessNearbyPerformed: Boolean!
  livenessNearbyScore: Float!
  livenessNearbyPassed: Boolean!
  livenessDistantPerformed: Boolean!
  livenessDistantScore: Float!
  livenessDistantPassed: Boolean!
  performed: Boolean!
  passed: Boolean!
  faceId: UUID!
  face: Face
}

type SpoofResult {
  evaluationRequested: Boolean!
  evaluationPerformed: Boolean!
  evaluationPassed: Boolean!
  distantLivenessSpoofCheck: LivenessSpoofResult!
  nearbyLivenessSpoofCheck: LivenessSpoofResult!
}

type Stream {
  cameras(where: CameraFilterInput order: [CameraSortInput!]): [Camera]
  faces(where: FaceFilterInput order: [FaceSortInput!]): [Face]
  videoRecords(where: VideoRecordFilterInput order: [VideoRecordSortInput!]): [VideoRecord]
  tracklets(where: TrackletFilterInput order: [TrackletSortInput!]): [Tracklet]
  frames(where: FrameFilterInput order: [FrameSortInput!]): [Frame]
  id: UUID!
  scopeId: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  description: String
  name: String
  sequenceNumber: Long!
  edgeStreams: [EdgeStream]
  pedestrians: [Pedestrian]
  genericObjects: [GenericObject]
  scope: Scope
}

type StreamInformation {
  streamId: UUID!
  clientId: String
}

type StreamSpoofDetectorResource {
  resourceId: String
  streamId: UUID!
}

"A segment of a collection."
type StreamsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Stream]
  totalCount: Int!
}

type Subscription {
  faceCreated(where: FaceCreatedNotificationDTOFilterInput): FaceCreatedNotificationDTO
  faceExtracted(where: FaceExtractedNotificationDTOFilterInput): FaceExtractedNotificationDTO
  matchResult(where: MatchResultNotificationDTOFilterInput): MatchResultNotificationDTO
  noMatchResult(where: NoMatchResultNotificationDTOFilterInput): NoMatchResultNotificationDTO
  matchResultInsert(where: MatchResultInsertDTOFilterInput): MatchResultInsertDTO
  progressMessage(where: ProgressMessageDTOFilterInput): ProgressMessageDTO
  videoRecordNotificationStateChanged(where: VideoRecordNotificationStateChangedDTOFilterInput): VideoRecordNotificationStateChangedDTO
  trackletCompleted(where: TrackletCompletedNotificationDTOFilterInput): TrackletCompletedNotificationDTO
  pedestrianInserted(where: PedestrianInsertedNotificationDTOFilterInput): PedestrianInsertedNotificationDTO
  faceProcessed(where: FaceProcessedNotificationDTOFilterInput): FaceProcessedNotificationDTO
  pedestrianProcessed(where: PedestrianProcessedNotificationDTOFilterInput): PedestrianProcessedNotificationDTO
  objectProcessed(where: ObjectProcessedNotificationDTOFilterInput): ObjectProcessedNotificationDTO
  objectInserted(where: ObjectInsertNotificationDTOFilterInput): ObjectInsertNotificationDTO
  identificationEvent(where: IdentificationEventNotificationDTOFilterInput): IdentificationEventNotificationDTO
  embeddedStreamProcessorHealth(clientId: String!): HealthReport
}

type Tag {
  videoRecords(where: VideoRecordFilterInput order: [VideoRecordSortInput!]): [VideoRecord]
  createdAt: DateTime!
  updatedAt: DateTime
  name: String
}

"A segment of a collection."
type TagsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Tag]
  totalCount: Int!
}

type Tracklet {
  matchResults(where: MatchResultFilterInput order: [MatchResultSortInput!]): [MatchResult]
  faces(where: FaceFilterInput order: [FaceSortInput!]): [Face]
  pedestrians(where: PedestrianFilterInput order: [PedestrianSortInput!]): [Pedestrian]
  genericObjects(where: GenericObjectFilterInput order: [GenericObjectSortInput!]): [GenericObject]
  watchlistMembers(where: WatchlistMemberFilterInput order: [WatchlistMemberSortInput!]): [WatchlistMember]
  individuals(where: IndividualFilterInput order: [IndividualSortInput!]): [Individual]
  scopeId: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  timeAppeared: DateTime!
  timeDisappeared: DateTime
  timeAppearedRelativeMs: Long!
  timeDisappearedRelativeMs: Long!
  id: UUID!
  streamId: UUID
  scope: Scope
  stream: Stream
}

type TrackletCompletedNotificationDTO {
  scopeId: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  timeAppeared: DateTime!
  timeDisappeared: DateTime!
  timeAppearedRelativeMs: Long!
  timeDisappearedRelativeMs: Long!
  streamId: UUID!
  id: UUID!
}

"A segment of a collection."
type TrackletsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Tracklet]
  totalCount: Int!
}

type VideoRecord {
  stream(where: StreamFilterInput order: [StreamSortInput!]): Stream
  tags(where: TagFilterInput order: [TagSortInput!]): [Tag]
  id: UUID!
  streamId: UUID!
  state: VideoState!
  source: String
  enabled: Boolean!
  minFaceSize: Int!
  maxFaceSize: Int!
  maxFaces: Int!
  confidenceThreshold: Int!
  redetectionTime: Int!
  templateGenerationTime: Int!
  faceSaveStrategy: FaceSaveStrategy!
  maskImagePath: String
  saveFrameImageData: Boolean!
  imageQuality: Int!
  recordedAt: DateTime!
  videoDurationMs: Long
  createdAt: DateTime!
  updatedAt: DateTime
  matchDetectedFaces: Boolean!
  matchMaxResultsCount: Int!
  description: String
  processingStartTime: DateTime
  processingDurationMs: Long
}

type VideoRecordNotificationStateChangedDTO {
  id: UUID!
  state: VideoState!
  createdAt: DateTime!
  updatedAt: DateTime
}

"A segment of a collection."
type VideoRecordsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [VideoRecord]
  totalCount: Int!
}

type Watchlist {
  watchlistMembers(order: [WatchlistMemberSortInput!] where: WatchlistMemberFilterInput): [WatchlistMember]
  matchResults(where: MatchResultFilterInput order: [MatchResultSortInput!]): [MatchResult]
  id: String
  displayName: String
  fullName: String
  createdAt: DateTime!
  updatedAt: DateTime
  threshold: Int!
  palmThreshold: Int!
  previewColor: String
  edgeStreams: [EdgeStream]
}

type WatchlistInfo {
  id: String!
  displayName: String!
  fullName: String!
  previewColor: String!
}

type WatchlistMember {
  watchlists(where: WatchlistFilterInput order: [WatchlistSortInput!]): [Watchlist]
  tracklet(where: TrackletFilterInput order: [TrackletSortInput!]): Tracklet
  matchResults(where: MatchResultFilterInput order: [MatchResultSortInput!]): [MatchResult]
  id: String
  labels(where: WatchlistMemberLabelFilterInput order: [WatchlistMemberLabelSortInput!]): [WatchlistMemberLabel]
  maskedAveragedWildTemplate: ByteArray
  notMaskedAveragedWildTemplate: ByteArray
  displayName: String
  fullName: String
  note: String
  createdAt: DateTime!
  updatedAt: DateTime
  trackletId: UUID!
  totpEnabled: Boolean!
}

type WatchlistMemberLabel {
  key: String
  value: String
}

"A segment of a collection."
type WatchlistMembersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [WatchlistMember]
  totalCount: Int!
}

"A segment of a collection."
type WatchlistsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Watchlist]
  totalCount: Int!
}

type Worker {
  id: Long!
  enabled: Boolean!
  workerType: WorkerType!
  description: String
  serviceId: Long!
  createdAt: DateTime!
  updatedAt: DateTime
  service: Service
}

input AttributeTypeOperationFilterInput {
  eq: AttributeType
  neq: AttributeType
  in: [AttributeType!]
  nin: [AttributeType!]
}

input BodyPartsSpoofCheckFilterInput {
  and: [BodyPartsSpoofCheckFilterInput!]
  or: [BodyPartsSpoofCheckFilterInput!]
  performed: BooleanOperationFilterInput
  photoInHandsDetected: BooleanOperationFilterInput
  passed: BooleanOperationFilterInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ByteOperationFilterInput {
  eq: Byte
  neq: Byte
  in: [Byte]
  nin: [Byte]
  gt: Byte
  ngt: Byte
  gte: Byte
  ngte: Byte
  lt: Byte
  nlt: Byte
  lte: Byte
  nlte: Byte
}

input CameraFilterInput {
  and: [CameraFilterInput!]
  or: [CameraFilterInput!]
  mPEG1PreviewEnabled: BooleanOperationFilterInput
  mPEG1PreviewPort: IntOperationFilterInput
  mPEG1VideoBitrate: IntOperationFilterInput
  id: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  streamWorkerId: LongOperationFilterInput
  videoPublishWorkerId: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  streamWorker: WorkerFilterInput
  videoPublishWorker: WorkerFilterInput
  serviceVideoSlots: ListFilterInputTypeOfServiceVideoSlotFilterInput
  cameraSpoofDetectorResources: ListFilterInputTypeOfStreamSpoofDetectorResourceFilterInput
  stream: StreamFilterInput
  source: StringOperationFilterInput
  processVideoOnlyOnce: BooleanOperationFilterInput
  deepTrack: BooleanOperationFilterInput
  processAsVideoFile: BooleanOperationFilterInput
  usePosMsecFromSource: BooleanOperationFilterInput
  trackMinFaceSize: IntOperationFilterInput
  trackMaxFaceSize: IntOperationFilterInput
  maxTrackingFaces: IntOperationFilterInput
  faceDetectionConfidenceThreshold: IntOperationFilterInput
  trackMinPedestrianSize: FloatOperationFilterInput
  trackMaxPedestrianSize: FloatOperationFilterInput
  maxTrackingPedestrians: IntOperationFilterInput
  pedestrianDetectionConfidenceThreshold: IntOperationFilterInput
  trackMinPalmSize: FloatOperationFilterInput
  trackMaxPalmSize: FloatOperationFilterInput
  maxTrackingPalms: IntOperationFilterInput
  palmDetectionConfidenceThreshold: IntOperationFilterInput
  palmDetectorResourceId: StringOperationFilterInput
  palmExtractorResourceId: StringOperationFilterInput
  trackMinObjectSize: FloatOperationFilterInput
  trackMaxObjectSize: FloatOperationFilterInput
  maxTrackingObjects: IntOperationFilterInput
  objectDetectionConfidenceThreshold: IntOperationFilterInput
  spoofDetectorExternalScoreThreshold: FloatOperationFilterInput
  spoofDetectorDistantLivenessScoreThreshold: FloatOperationFilterInput
  spoofDetectorNearbyLivenessScoreThreshold: FloatOperationFilterInput
  spoofDetectorDistantLivenessConditions: StringOperationFilterInput
  spoofDetectorNearbyLivenessConditions: StringOperationFilterInput
  faceDetectorResourceId: StringOperationFilterInput
  templateGeneratorResourceId: StringOperationFilterInput
  pedestrianDetectorResourceId: StringOperationFilterInput
  objectDetectorResourceId: StringOperationFilterInput
  pedestrianExtractorResourceId: StringOperationFilterInput
  redetectionTime: IntOperationFilterInput
  templateGenerationTime: IntOperationFilterInput
  trackMotionOptimization: StringOperationFilterInput
  trackSpeedAccuracyMode: StringOperationFilterInput
  faceSaveStrategy: FaceSaveStrategyOperationFilterInput
  pedestrianSaveStrategy: PedestrianSaveStrategyOperationFilterInput
  objectSaveStrategy: ObjectSaveStrategyOperationFilterInput
  maskImagePath: StringOperationFilterInput
  saveFrameImageData: BooleanOperationFilterInput
  imageQuality: IntOperationFilterInput
  previewMaxDimension: IntOperationFilterInput
  renderOrder: BooleanOperationFilterInput
  renderSize: BooleanOperationFilterInput
  renderQuality: BooleanOperationFilterInput
  renderYawAngle: BooleanOperationFilterInput
  renderPitchAngle: BooleanOperationFilterInput
  renderRollAngle: BooleanOperationFilterInput
  renderWatchlistMemberId: BooleanOperationFilterInput
  renderWatchlistMemberName: BooleanOperationFilterInput
  renderWatchlistName: BooleanOperationFilterInput
  renderMatchingScore: BooleanOperationFilterInput
  renderAge: BooleanOperationFilterInput
  renderGender: BooleanOperationFilterInput
  renderTemplateQuality: BooleanOperationFilterInput
  renderFaceMaskStatus: BooleanOperationFilterInput
  renderFaceMaskConfidence: BooleanOperationFilterInput
  renderSharpness: BooleanOperationFilterInput
  renderBrightness: BooleanOperationFilterInput
  renderTintedGlasses: BooleanOperationFilterInput
  renderHeavyFrame: BooleanOperationFilterInput
  renderGlassStatus: BooleanOperationFilterInput
  textFontSize: IntOperationFilterInput
  detectCar: BooleanOperationFilterInput
  detectBus: BooleanOperationFilterInput
  detectTruck: BooleanOperationFilterInput
  detectMotorcycle: BooleanOperationFilterInput
  detectBicycle: BooleanOperationFilterInput
  detectBoat: BooleanOperationFilterInput
  detectAirplane: BooleanOperationFilterInput
  detectTrain: BooleanOperationFilterInput
  detectBird: BooleanOperationFilterInput
  detectCat: BooleanOperationFilterInput
  detectDog: BooleanOperationFilterInput
  detectHorse: BooleanOperationFilterInput
  detectSheep: BooleanOperationFilterInput
  detectCow: BooleanOperationFilterInput
  detectBear: BooleanOperationFilterInput
  detectElephant: BooleanOperationFilterInput
  detectGiraffe: BooleanOperationFilterInput
  detectZebra: BooleanOperationFilterInput
  detectSuitcase: BooleanOperationFilterInput
  detectBackpack: BooleanOperationFilterInput
  detectHandbag: BooleanOperationFilterInput
  detectUmbrella: BooleanOperationFilterInput
  detectKnife: BooleanOperationFilterInput
}

input CameraSortInput {
  mPEG1PreviewEnabled: SortEnumType
  mPEG1PreviewPort: SortEnumType
  mPEG1VideoBitrate: SortEnumType
  id: SortEnumType
  streamId: SortEnumType
  streamWorkerId: SortEnumType
  videoPublishWorkerId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  streamWorker: WorkerSortInput
  videoPublishWorker: WorkerSortInput
  stream: StreamSortInput
  source: SortEnumType
  processVideoOnlyOnce: SortEnumType
  deepTrack: SortEnumType
  processAsVideoFile: SortEnumType
  usePosMsecFromSource: SortEnumType
  trackMinFaceSize: SortEnumType
  trackMaxFaceSize: SortEnumType
  maxTrackingFaces: SortEnumType
  faceDetectionConfidenceThreshold: SortEnumType
  trackMinPedestrianSize: SortEnumType
  trackMaxPedestrianSize: SortEnumType
  maxTrackingPedestrians: SortEnumType
  pedestrianDetectionConfidenceThreshold: SortEnumType
  trackMinPalmSize: SortEnumType
  trackMaxPalmSize: SortEnumType
  maxTrackingPalms: SortEnumType
  palmDetectionConfidenceThreshold: SortEnumType
  palmDetectorResourceId: SortEnumType
  palmExtractorResourceId: SortEnumType
  trackMinObjectSize: SortEnumType
  trackMaxObjectSize: SortEnumType
  maxTrackingObjects: SortEnumType
  objectDetectionConfidenceThreshold: SortEnumType
  spoofDetectorExternalScoreThreshold: SortEnumType
  spoofDetectorDistantLivenessScoreThreshold: SortEnumType
  spoofDetectorNearbyLivenessScoreThreshold: SortEnumType
  spoofDetectorDistantLivenessConditions: SortEnumType
  spoofDetectorNearbyLivenessConditions: SortEnumType
  faceDetectorResourceId: SortEnumType
  templateGeneratorResourceId: SortEnumType
  pedestrianDetectorResourceId: SortEnumType
  objectDetectorResourceId: SortEnumType
  pedestrianExtractorResourceId: SortEnumType
  redetectionTime: SortEnumType
  templateGenerationTime: SortEnumType
  trackMotionOptimization: SortEnumType
  trackSpeedAccuracyMode: SortEnumType
  faceSaveStrategy: SortEnumType
  pedestrianSaveStrategy: SortEnumType
  objectSaveStrategy: SortEnumType
  maskImagePath: SortEnumType
  saveFrameImageData: SortEnumType
  imageQuality: SortEnumType
  previewMaxDimension: SortEnumType
  renderOrder: SortEnumType
  renderSize: SortEnumType
  renderQuality: SortEnumType
  renderYawAngle: SortEnumType
  renderPitchAngle: SortEnumType
  renderRollAngle: SortEnumType
  renderWatchlistMemberId: SortEnumType
  renderWatchlistMemberName: SortEnumType
  renderWatchlistName: SortEnumType
  renderMatchingScore: SortEnumType
  renderAge: SortEnumType
  renderGender: SortEnumType
  renderTemplateQuality: SortEnumType
  renderFaceMaskStatus: SortEnumType
  renderFaceMaskConfidence: SortEnumType
  renderSharpness: SortEnumType
  renderBrightness: SortEnumType
  renderTintedGlasses: SortEnumType
  renderHeavyFrame: SortEnumType
  renderGlassStatus: SortEnumType
  textFontSize: SortEnumType
  detectCar: SortEnumType
  detectBus: SortEnumType
  detectTruck: SortEnumType
  detectMotorcycle: SortEnumType
  detectBicycle: SortEnumType
  detectBoat: SortEnumType
  detectAirplane: SortEnumType
  detectTrain: SortEnumType
  detectBird: SortEnumType
  detectCat: SortEnumType
  detectDog: SortEnumType
  detectHorse: SortEnumType
  detectSheep: SortEnumType
  detectCow: SortEnumType
  detectBear: SortEnumType
  detectElephant: SortEnumType
  detectGiraffe: SortEnumType
  detectZebra: SortEnumType
  detectSuitcase: SortEnumType
  detectBackpack: SortEnumType
  detectHandbag: SortEnumType
  detectUmbrella: SortEnumType
  detectKnife: SortEnumType
}

input CropCoordinatesFilterInput {
  and: [CropCoordinatesFilterInput!]
  or: [CropCoordinatesFilterInput!]
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input EdgeStreamFaceDetectionCropSettingsFilterInput {
  and: [EdgeStreamFaceDetectionCropSettingsFilterInput!]
  or: [EdgeStreamFaceDetectionCropSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  maxSize: FloatOperationFilterInput
  imageFormat: EdgeStreamImageFormatOperationFilterInput
  imageQuality: FloatOperationFilterInput
}

input EdgeStreamFaceDetectionCropSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  maxSize: SortEnumType
  imageFormat: SortEnumType
  imageQuality: SortEnumType
}

input EdgeStreamFaceDetectionOrderByOperationFilterInput {
  eq: EdgeStreamFaceDetectionOrderBy
  neq: EdgeStreamFaceDetectionOrderBy
  in: [EdgeStreamFaceDetectionOrderBy!]
  nin: [EdgeStreamFaceDetectionOrderBy!]
}

input EdgeStreamFaceDetectionSettingsFilterInput {
  and: [EdgeStreamFaceDetectionSettingsFilterInput!]
  or: [EdgeStreamFaceDetectionSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  maxDetections: IntOperationFilterInput
  minFaceSize: FloatOperationFilterInput
  maxFaceSize: FloatOperationFilterInput
  orderBy: EdgeStreamFaceDetectionOrderByOperationFilterInput
  tracking: EdgeStreamFaceDetectionTrackingSettingsFilterInput
  crop: EdgeStreamFaceDetectionCropSettingsFilterInput
}

input EdgeStreamFaceDetectionSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  maxDetections: SortEnumType
  minFaceSize: SortEnumType
  maxFaceSize: SortEnumType
  orderBy: SortEnumType
  tracking: EdgeStreamFaceDetectionTrackingSettingsSortInput
  crop: EdgeStreamFaceDetectionCropSettingsSortInput
}

input EdgeStreamFaceDetectionTrackingSettingsFilterInput {
  and: [EdgeStreamFaceDetectionTrackingSettingsFilterInput!]
  or: [EdgeStreamFaceDetectionTrackingSettingsFilterInput!]
  id: UuidOperationFilterInput
  outputThreshold: FloatOperationFilterInput
  inputThreshold: FloatOperationFilterInput
  stability: FloatOperationFilterInput
  maxFramesLost: IntOperationFilterInput
}

input EdgeStreamFaceDetectionTrackingSettingsSortInput {
  id: SortEnumType
  outputThreshold: SortEnumType
  inputThreshold: SortEnumType
  stability: SortEnumType
  maxFramesLost: SortEnumType
}

input EdgeStreamFaceExtractionSettingsFilterInput {
  and: [EdgeStreamFaceExtractionSettingsFilterInput!]
  or: [EdgeStreamFaceExtractionSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
}

input EdgeStreamFaceExtractionSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
}

input EdgeStreamFaceIdentificationSettingsFilterInput {
  and: [EdgeStreamFaceIdentificationSettingsFilterInput!]
  or: [EdgeStreamFaceIdentificationSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  threshold: FloatOperationFilterInput
}

input EdgeStreamFaceIdentificationSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  threshold: SortEnumType
}

input EdgeStreamFaceLivenessConditionParameterOperationFilterInput {
  eq: EdgeStreamFaceLivenessConditionParameter
  neq: EdgeStreamFaceLivenessConditionParameter
  in: [EdgeStreamFaceLivenessConditionParameter!]
  nin: [EdgeStreamFaceLivenessConditionParameter!]
}

input EdgeStreamFaceLivenessPassiveConditionFilterInput {
  and: [EdgeStreamFaceLivenessPassiveConditionFilterInput!]
  or: [EdgeStreamFaceLivenessPassiveConditionFilterInput!]
  edgeStreamId: UuidOperationFilterInput
  parameter: EdgeStreamFaceLivenessConditionParameterOperationFilterInput
  lowerThreshold: FloatOperationFilterInput
  upperThreshold: FloatOperationFilterInput
}

input EdgeStreamFaceLivenessPassiveSettingsFilterInput {
  and: [EdgeStreamFaceLivenessPassiveSettingsFilterInput!]
  or: [EdgeStreamFaceLivenessPassiveSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  strategy: EdgeStreamLivenessStrategyOperationFilterInput
  conditions: ListFilterInputTypeOfEdgeStreamFaceLivenessPassiveConditionFilterInput
}

input EdgeStreamFaceLivenessPassiveSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  strategy: SortEnumType
}

input EdgeStreamFilterInput {
  and: [EdgeStreamFilterInput!]
  or: [EdgeStreamFilterInput!]
  id: UuidOperationFilterInput
  clientId: StringOperationFilterInput
  enabled: BooleanOperationFilterInput
  saveFrameImageData: BooleanOperationFilterInput
  templateGeneratorResourceId: StringOperationFilterInput
  faceSaveStrategy: FaceSaveStrategyOperationFilterInput
  objectSaveStrategy: ObjectSaveStrategyOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  streamId: UuidOperationFilterInput
  scopeId: UuidOperationFilterInput
  spoofDetectorDistantLivenessScoreThreshold: FloatOperationFilterInput
  spoofDetectorNearbyLivenessScoreThreshold: FloatOperationFilterInput
  spoofDetectorDistantLivenessConditions: StringOperationFilterInput
  spoofDetectorNearbyLivenessConditions: StringOperationFilterInput
  watchlistSyncOption: WatchlistSyncOptionOperationFilterInput
  matchingDataStrategy: MatchingDataStrategyOperationFilterInput
  livenessDataStrategy: LivenessDataStrategyOperationFilterInput
  stream: StreamFilterInput
  edgeStreamSpoofDetectorResources: ListFilterInputTypeOfStreamSpoofDetectorResourceFilterInput
  watchlists: ListFilterInputTypeOfWatchlistFilterInput
  settings: EdgeStreamSettingsFilterInput
}

input EdgeStreamFullFrameSettingsFilterInput {
  and: [EdgeStreamFullFrameSettingsFilterInput!]
  or: [EdgeStreamFullFrameSettingsFilterInput!]
  id: UuidOperationFilterInput
  imageWidth: IntOperationFilterInput
  imageHeight: IntOperationFilterInput
  imageFormat: EdgeStreamImageFormatOperationFilterInput
  imageQuality: FloatOperationFilterInput
}

input EdgeStreamFullFrameSettingsSortInput {
  id: SortEnumType
  imageWidth: SortEnumType
  imageHeight: SortEnumType
  imageFormat: SortEnumType
  imageQuality: SortEnumType
}

input EdgeStreamImageFormatOperationFilterInput {
  eq: EdgeStreamImageFormat
  neq: EdgeStreamImageFormat
  in: [EdgeStreamImageFormat!]
  nin: [EdgeStreamImageFormat!]
}

input EdgeStreamLivenessStrategyOperationFilterInput {
  eq: EdgeStreamLivenessStrategy
  neq: EdgeStreamLivenessStrategy
  in: [EdgeStreamLivenessStrategy!]
  nin: [EdgeStreamLivenessStrategy!]
}

input EdgeStreamMessagingSettingsFilterInput {
  and: [EdgeStreamMessagingSettingsFilterInput!]
  or: [EdgeStreamMessagingSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  strategy: EdgeStreamMessagingStrategyOperationFilterInput
  interval: IntOperationFilterInput
  allowEmptyMessages: BooleanOperationFilterInput
  identifiedOnly: BooleanOperationFilterInput
}

input EdgeStreamMessagingSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  strategy: SortEnumType
  interval: SortEnumType
  allowEmptyMessages: SortEnumType
  identifiedOnly: SortEnumType
}

input EdgeStreamMessagingStrategyOperationFilterInput {
  eq: EdgeStreamMessagingStrategy
  neq: EdgeStreamMessagingStrategy
  in: [EdgeStreamMessagingStrategy!]
  nin: [EdgeStreamMessagingStrategy!]
}

input EdgeStreamPalmDetectionSettingsFilterInput {
  and: [EdgeStreamPalmDetectionSettingsFilterInput!]
  or: [EdgeStreamPalmDetectionSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  maxDetections: IntOperationFilterInput
  boundingBoxExtension: FloatOperationFilterInput
  tracking: EdgeStreamPalmDetectionTrackingSettingsFilterInput
}

input EdgeStreamPalmDetectionSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  maxDetections: SortEnumType
  boundingBoxExtension: SortEnumType
  tracking: EdgeStreamPalmDetectionTrackingSettingsSortInput
}

input EdgeStreamPalmDetectionTrackingSettingsFilterInput {
  and: [EdgeStreamPalmDetectionTrackingSettingsFilterInput!]
  or: [EdgeStreamPalmDetectionTrackingSettingsFilterInput!]
  id: UuidOperationFilterInput
  outputThreshold: FloatOperationFilterInput
  inputThreshold: FloatOperationFilterInput
  stability: FloatOperationFilterInput
  maxFramesLost: IntOperationFilterInput
}

input EdgeStreamPalmDetectionTrackingSettingsSortInput {
  id: SortEnumType
  outputThreshold: SortEnumType
  inputThreshold: SortEnumType
  stability: SortEnumType
  maxFramesLost: SortEnumType
}

input EdgeStreamSettingsFilterInput {
  and: [EdgeStreamSettingsFilterInput!]
  or: [EdgeStreamSettingsFilterInput!]
  visualCodeDetection: EdgeStreamVisualCodeDetectionSettingsFilterInput
  palmDetection: EdgeStreamPalmDetectionSettingsFilterInput
  faceDetection: EdgeStreamFaceDetectionSettingsFilterInput
  faceExtraction: EdgeStreamFaceExtractionSettingsFilterInput
  faceLivenessPassive: EdgeStreamFaceLivenessPassiveSettingsFilterInput
  faceIdentification: EdgeStreamFaceIdentificationSettingsFilterInput
  messaging: EdgeStreamMessagingSettingsFilterInput
  fullFrame: EdgeStreamFullFrameSettingsFilterInput
}

input EdgeStreamSettingsSortInput {
  id: SortEnumType
  visualCodeDetection: EdgeStreamVisualCodeDetectionSettingsSortInput
  palmDetection: EdgeStreamPalmDetectionSettingsSortInput
  faceDetection: EdgeStreamFaceDetectionSettingsSortInput
  faceExtraction: EdgeStreamFaceExtractionSettingsSortInput
  faceLivenessPassive: EdgeStreamFaceLivenessPassiveSettingsSortInput
  faceIdentification: EdgeStreamFaceIdentificationSettingsSortInput
  messaging: EdgeStreamMessagingSettingsSortInput
  fullFrame: EdgeStreamFullFrameSettingsSortInput
}

input EdgeStreamSortInput {
  id: SortEnumType
  clientId: SortEnumType
  enabled: SortEnumType
  saveFrameImageData: SortEnumType
  templateGeneratorResourceId: SortEnumType
  faceSaveStrategy: SortEnumType
  objectSaveStrategy: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  streamId: SortEnumType
  scopeId: SortEnumType
  spoofDetectorDistantLivenessScoreThreshold: SortEnumType
  spoofDetectorNearbyLivenessScoreThreshold: SortEnumType
  spoofDetectorDistantLivenessConditions: SortEnumType
  spoofDetectorNearbyLivenessConditions: SortEnumType
  watchlistSyncOption: SortEnumType
  matchingDataStrategy: SortEnumType
  livenessDataStrategy: SortEnumType
  stream: StreamSortInput
  settings: EdgeStreamSettingsSortInput
}

input EdgeStreamVisualCodeDetectionSettingsFilterInput {
  and: [EdgeStreamVisualCodeDetectionSettingsFilterInput!]
  or: [EdgeStreamVisualCodeDetectionSettingsFilterInput!]
  id: UuidOperationFilterInput
  enable: BooleanOperationFilterInput
  maxDetections: IntOperationFilterInput
  boundingBoxExtension: FloatOperationFilterInput
  tracking: EdgeStreamVisualCodeDetectionTrackingSettingsFilterInput
}

input EdgeStreamVisualCodeDetectionSettingsSortInput {
  id: SortEnumType
  enable: SortEnumType
  maxDetections: SortEnumType
  boundingBoxExtension: SortEnumType
  tracking: EdgeStreamVisualCodeDetectionTrackingSettingsSortInput
}

input EdgeStreamVisualCodeDetectionTrackingSettingsFilterInput {
  and: [EdgeStreamVisualCodeDetectionTrackingSettingsFilterInput!]
  or: [EdgeStreamVisualCodeDetectionTrackingSettingsFilterInput!]
  id: UuidOperationFilterInput
  outputThreshold: FloatOperationFilterInput
  inputThreshold: FloatOperationFilterInput
  stability: FloatOperationFilterInput
  maxFramesLost: IntOperationFilterInput
}

input EdgeStreamVisualCodeDetectionTrackingSettingsSortInput {
  id: SortEnumType
  outputThreshold: SortEnumType
  inputThreshold: SortEnumType
  stability: SortEnumType
  maxFramesLost: SortEnumType
}

input ExternalSpoofCheckFilterInput {
  and: [ExternalSpoofCheckFilterInput!]
  or: [ExternalSpoofCheckFilterInput!]
  performed: BooleanOperationFilterInput
  passed: BooleanOperationFilterInput
  score: FloatOperationFilterInput
  quality: FloatOperationFilterInput
}

input FaceCreatedNotificationDTOFilterInput {
  and: [FaceCreatedNotificationDTOFilterInput!]
  or: [FaceCreatedNotificationDTOFilterInput!]
  type: FaceTypeOperationFilterInput
  state: FaceStateOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  size: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  processedAt: DateTimeOperationFilterInput
}

input FaceExtractedNotificationDTOFilterInput {
  and: [FaceExtractedNotificationDTOFilterInput!]
  or: [FaceExtractedNotificationDTOFilterInput!]
  id: UuidOperationFilterInput
  type: FaceTypeOperationFilterInput
  trackletId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  state: FaceStateOperationFilterInput
  imageDataId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  quality: IntOperationFilterInput
  templateQuality: IntOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  faceArea: FloatOperationFilterInput
  size: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
}

input FaceFilterInput {
  and: [FaceFilterInput!]
  or: [FaceFilterInput!]
  objectType: IntOperationFilterInput
  faceState: FaceStateOperationFilterInput
  template: ListByteOperationFilterInput
  templateVersion: StringOperationFilterInput
  templateQuality: IntOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  serializedId: UuidOperationFilterInput
  faceType: FaceTypeOperationFilterInput
  autolearnClusterType: NullableOfAutolearnClusterTypeOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  state: FaceStateOperationFilterInput
  type: FaceTypeOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  matchResults: ListFilterInputTypeOfMatchResultFilterInput
  searchSessionObjects: ListFilterInputTypeOfSearchSessionObjectFilterInput
  pedestrianId: UuidOperationFilterInput
  pedestrian: PedestrianFilterInput
  pedestriansNavigation: ListFilterInputTypeOfPedestrianFilterInput
  spoofCheckResult: SpoofCheckResultFilterInput
  bestForIndividuals: ListFilterInputTypeOfIndividualFilterInput
  genderFormatted: NullableOfGenderTypeOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  size: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  tracklet: TrackletFilterInput
  frame: FrameFilterInput
  stream: StreamFilterInput
  tenantId: StringOperationFilterInput
  objectAttributes: ListFilterInputTypeOfObjectAttributeFilterInput
}

input FaceInformationFilterInput {
  and: [FaceInformationFilterInput!]
  or: [FaceInformationFilterInput!]
  id: UuidOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceSize: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  trackletId: UuidOperationFilterInput
  faceQuality: IntOperationFilterInput
  templateQuality: IntOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  cropCoordinates: CropCoordinatesFilterInput
}

input FaceMaskStatusOperationFilterInput {
  eq: FaceMaskStatus
  neq: FaceMaskStatus
  in: [FaceMaskStatus!]
  nin: [FaceMaskStatus!]
}

input FaceModalityInfoFilterInput {
  and: [FaceModalityInfoFilterInput!]
  or: [FaceModalityInfoFilterInput!]
  faceInformation: FaceInformationFilterInput
  faceMatchInfo: MatchInfoFilterInput
  spoofResult: SpoofResultFilterInput
}

input FaceProcessedNotificationDTOFilterInput {
  and: [FaceProcessedNotificationDTOFilterInput!]
  or: [FaceProcessedNotificationDTOFilterInput!]
  faceInformation: FaceInformationFilterInput
  matchInformation: ListFilterInputTypeOfMatchInformationFilterInput
  frameInformation: FrameInformationFilterInput
  spoofCheck: SpoofCheckFilterInput
}

input FaceSaveStrategyOperationFilterInput {
  eq: FaceSaveStrategy
  neq: FaceSaveStrategy
  in: [FaceSaveStrategy!]
  nin: [FaceSaveStrategy!]
}

input FaceSortInput {
  objectType: SortEnumType
  faceState: SortEnumType
  templateVersion: SortEnumType
  templateQuality: SortEnumType
  leftEyeX: SortEnumType
  leftEyeY: SortEnumType
  rightEyeX: SortEnumType
  rightEyeY: SortEnumType
  serializedId: SortEnumType
  faceType: SortEnumType
  autolearnClusterType: SortEnumType
  age: SortEnumType
  gender: SortEnumType
  faceMaskConfidence: SortEnumType
  noseTipConfidence: SortEnumType
  sharpness: SortEnumType
  brightness: SortEnumType
  heavyFrame: SortEnumType
  glassStatus: SortEnumType
  tintedGlasses: SortEnumType
  faceMaskStatus: SortEnumType
  faceAreaChange: SortEnumType
  faceArea: SortEnumType
  faceOrder: SortEnumType
  facesOnFrameCount: SortEnumType
  state: SortEnumType
  type: SortEnumType
  yawAngle: SortEnumType
  pitchAngle: SortEnumType
  rollAngle: SortEnumType
  pedestrianId: SortEnumType
  pedestrian: PedestrianSortInput
  spoofCheckResult: SpoofCheckResultSortInput
  genderFormatted: SortEnumType
  id: SortEnumType
  imageDataId: SortEnumType
  quality: SortEnumType
  cropLeftTopX: SortEnumType
  cropLeftTopY: SortEnumType
  cropRightTopX: SortEnumType
  cropRightTopY: SortEnumType
  cropLeftBottomX: SortEnumType
  cropLeftBottomY: SortEnumType
  cropRightBottomX: SortEnumType
  cropRightBottomY: SortEnumType
  areaOnFrame: SortEnumType
  size: SortEnumType
  objectOrderOnFrameForType: SortEnumType
  objectsOnFrameCountForType: SortEnumType
  trackletId: SortEnumType
  frameId: SortEnumType
  streamId: SortEnumType
  updatedAt: SortEnumType
  createdAt: SortEnumType
  processedAt: SortEnumType
  tracklet: TrackletSortInput
  frame: FrameSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
}

input FaceStateOperationFilterInput {
  eq: FaceState
  neq: FaceState
  in: [FaceState!]
  nin: [FaceState!]
}

input FaceTypeOperationFilterInput {
  eq: FaceType
  neq: FaceType
  in: [FaceType!]
  nin: [FaceType!]
}

input FailedConditionInfoFilterInput {
  and: [FailedConditionInfoFilterInput!]
  or: [FailedConditionInfoFilterInput!]
  attributeName: StringOperationFilterInput
  attributeValue: FloatOperationFilterInput
  rangeMin: FloatOperationFilterInput
  rangeMax: FloatOperationFilterInput
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input FrameFilterInput {
  and: [FrameFilterInput!]
  or: [FrameFilterInput!]
  state: FrameStateOperationFilterInput
  scopeId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  receivedAt: DateTimeOperationFilterInput
  id: UuidOperationFilterInput
  positionInMs: LongOperationFilterInput
  isMarkedForDeletion: BooleanOperationFilterInput
  scope: ScopeFilterInput
  faces: ListFilterInputTypeOfFaceFilterInput
  pedestrians: ListFilterInputTypeOfPedestrianFilterInput
  genericObjects: ListFilterInputTypeOfGenericObjectFilterInput
  stream: StreamFilterInput
  tenantId: StringOperationFilterInput
}

input FrameInformationFilterInput {
  and: [FrameInformationFilterInput!]
  or: [FrameInformationFilterInput!]
  streamId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  clientId: StringOperationFilterInput
  frameTimestampMicroseconds: LongOperationFilterInput
}

input FrameSortInput {
  state: SortEnumType
  scopeId: SortEnumType
  streamId: SortEnumType
  imageDataId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  receivedAt: SortEnumType
  id: SortEnumType
  positionInMs: SortEnumType
  isMarkedForDeletion: SortEnumType
  scope: ScopeSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
}

input FrameStateOperationFilterInput {
  eq: FrameState
  neq: FrameState
  in: [FrameState!]
  nin: [FrameState!]
}

input GenericObjectFilterInput {
  and: [GenericObjectFilterInput!]
  or: [GenericObjectFilterInput!]
  genericObjectType: IntOperationFilterInput
  objectType: IntOperationFilterInput
  palmTemplate: ListByteOperationFilterInput
  matchResults: ListFilterInputTypeOfMatchResultFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  size: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  tracklet: TrackletFilterInput
  frame: FrameFilterInput
  stream: StreamFilterInput
  tenantId: StringOperationFilterInput
  objectAttributes: ListFilterInputTypeOfObjectAttributeFilterInput
}

input GenericObjectSortInput {
  genericObjectType: SortEnumType
  objectType: SortEnumType
  id: SortEnumType
  imageDataId: SortEnumType
  quality: SortEnumType
  cropLeftTopX: SortEnumType
  cropLeftTopY: SortEnumType
  cropRightTopX: SortEnumType
  cropRightTopY: SortEnumType
  cropLeftBottomX: SortEnumType
  cropLeftBottomY: SortEnumType
  cropRightBottomX: SortEnumType
  cropRightBottomY: SortEnumType
  areaOnFrame: SortEnumType
  size: SortEnumType
  objectOrderOnFrameForType: SortEnumType
  objectsOnFrameCountForType: SortEnumType
  trackletId: SortEnumType
  frameId: SortEnumType
  streamId: SortEnumType
  updatedAt: SortEnumType
  createdAt: SortEnumType
  processedAt: SortEnumType
  tracklet: TrackletSortInput
  frame: FrameSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
}

input GroupingMetadataFilterInput {
  and: [GroupingMetadataFilterInput!]
  or: [GroupingMetadataFilterInput!]
  id: LongOperationFilterInput
  scopeId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  state: GroupingStateOperationFilterInput
  isDefault: BooleanOperationFilterInput
  nextIterationTimeStamp: DateTimeOperationFilterInput
  enabled: BooleanOperationFilterInput
  groupingStep: IntOperationFilterInput
  slidingWindow: IntOperationFilterInput
  groupingStrategy: StringOperationFilterInput
  groupingThreshold: IntOperationFilterInput
  scope: ScopeFilterInput
  individuals: ListFilterInputTypeOfIndividualFilterInput
}

input GroupingMetadataSortInput {
  id: SortEnumType
  scopeId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  processedAt: SortEnumType
  state: SortEnumType
  isDefault: SortEnumType
  nextIterationTimeStamp: SortEnumType
  enabled: SortEnumType
  groupingStep: SortEnumType
  slidingWindow: SortEnumType
  groupingStrategy: SortEnumType
  groupingThreshold: SortEnumType
  scope: ScopeSortInput
}

input GroupingStateOperationFilterInput {
  eq: GroupingState
  neq: GroupingState
  in: [GroupingState!]
  nin: [GroupingState!]
}

input HumanPoseOperationFilterInput {
  eq: HumanPose
  neq: HumanPose
  in: [HumanPose!]
  nin: [HumanPose!]
}

input ISpanContextFilterInput {
  and: [ISpanContextFilterInput!]
  or: [ISpanContextFilterInput!]
  traceId: StringOperationFilterInput
  spanId: StringOperationFilterInput
}

input ISpanFilterInput {
  and: [ISpanFilterInput!]
  or: [ISpanFilterInput!]
  context: ISpanContextFilterInput
}

input IdentificationEventNotificationDTOFilterInput {
  and: [IdentificationEventNotificationDTOFilterInput!]
  or: [IdentificationEventNotificationDTOFilterInput!]
  identificationEventType: IdentificationEventTypeOperationFilterInput
  streamInformation: StreamInformationFilterInput
  frameInformation: IdentificationFrameInformationFilterInput
  memberDetails: MemberDetailsFilterInput
  modality: ModalityOperationFilterInput
  faceModalityInfo: FaceModalityInfoFilterInput
  opticalCodeModalityInfo: OpticalCodeModalityInfoFilterInput
  palmModalityInfo: PalmModalityInfoFilterInput
}

input IdentificationEventTypeOperationFilterInput {
  eq: IdentificationEventType
  neq: IdentificationEventType
  in: [IdentificationEventType!]
  nin: [IdentificationEventType!]
}

input IdentificationFrameInformationFilterInput {
  and: [IdentificationFrameInformationFilterInput!]
  or: [IdentificationFrameInformationFilterInput!]
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  timestamp: DateTimeOperationFilterInput
  timestampMicroseconds: LongOperationFilterInput
  width: IntOperationFilterInput
  height: IntOperationFilterInput
}

input IdentificationFrameInformationSortInput {
  id: SortEnumType
  imageDataId: SortEnumType
  timestamp: SortEnumType
  timestampMicroseconds: SortEnumType
  width: SortEnumType
  height: SortEnumType
}

input IndividualFilterInput {
  and: [IndividualFilterInput!]
  or: [IndividualFilterInput!]
  id: UuidOperationFilterInput
  groupingMetadataId: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  entranceTime: DateTimeOperationFilterInput
  exitTime: DateTimeOperationFilterInput
  hidden: BooleanOperationFilterInput
  bestFaceId: UuidOperationFilterInput
  bestFace: FaceFilterInput
  groupingMetadata: GroupingMetadataFilterInput
  tracklets: ListFilterInputTypeOfTrackletFilterInput
  faces: ListFilterInputTypeOfFaceFilterInput
}

input IndividualSortInput {
  id: SortEnumType
  groupingMetadataId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  entranceTime: SortEnumType
  exitTime: SortEnumType
  hidden: SortEnumType
  bestFaceId: SortEnumType
  bestFace: FaceSortInput
  groupingMetadata: GroupingMetadataSortInput
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListByteOperationFilterInput {
  all: ByteOperationFilterInput
  none: ByteOperationFilterInput
  some: ByteOperationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCameraFilterInput {
  all: CameraFilterInput
  none: CameraFilterInput
  some: CameraFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEdgeStreamFaceLivenessPassiveConditionFilterInput {
  all: EdgeStreamFaceLivenessPassiveConditionFilterInput
  none: EdgeStreamFaceLivenessPassiveConditionFilterInput
  some: EdgeStreamFaceLivenessPassiveConditionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfEdgeStreamFilterInput {
  all: EdgeStreamFilterInput
  none: EdgeStreamFilterInput
  some: EdgeStreamFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFaceFilterInput {
  all: FaceFilterInput
  none: FaceFilterInput
  some: FaceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFailedConditionInfoFilterInput {
  all: FailedConditionInfoFilterInput
  none: FailedConditionInfoFilterInput
  some: FailedConditionInfoFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFrameFilterInput {
  all: FrameFilterInput
  none: FrameFilterInput
  some: FrameFilterInput
  any: Boolean
}

input ListFilterInputTypeOfGenericObjectFilterInput {
  all: GenericObjectFilterInput
  none: GenericObjectFilterInput
  some: GenericObjectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfGroupingMetadataFilterInput {
  all: GroupingMetadataFilterInput
  none: GroupingMetadataFilterInput
  some: GroupingMetadataFilterInput
  any: Boolean
}

input ListFilterInputTypeOfIndividualFilterInput {
  all: IndividualFilterInput
  none: IndividualFilterInput
  some: IndividualFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMatchInformationFilterInput {
  all: MatchInformationFilterInput
  none: MatchInformationFilterInput
  some: MatchInformationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMatchResultFilterInput {
  all: MatchResultFilterInput
  none: MatchResultFilterInput
  some: MatchResultFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMatchResultInfoFilterInput {
  all: MatchResultInfoFilterInput
  none: MatchResultInfoFilterInput
  some: MatchResultInfoFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMemberLabelFilterInput {
  all: MemberLabelFilterInput
  none: MemberLabelFilterInput
  some: MemberLabelFilterInput
  any: Boolean
}

input ListFilterInputTypeOfObjectAttributeFilterInput {
  all: ObjectAttributeFilterInput
  none: ObjectAttributeFilterInput
  some: ObjectAttributeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfPedestrianFilterInput {
  all: PedestrianFilterInput
  none: PedestrianFilterInput
  some: PedestrianFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSearchSessionObjectFilterInput {
  all: SearchSessionObjectFilterInput
  none: SearchSessionObjectFilterInput
  some: SearchSessionObjectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfServiceVideoSlotFilterInput {
  all: ServiceVideoSlotFilterInput
  none: ServiceVideoSlotFilterInput
  some: ServiceVideoSlotFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStreamFilterInput {
  all: StreamFilterInput
  none: StreamFilterInput
  some: StreamFilterInput
  any: Boolean
}

input ListFilterInputTypeOfStreamSpoofDetectorResourceFilterInput {
  all: StreamSpoofDetectorResourceFilterInput
  none: StreamSpoofDetectorResourceFilterInput
  some: StreamSpoofDetectorResourceFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTagFilterInput {
  all: TagFilterInput
  none: TagFilterInput
  some: TagFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTrackletFilterInput {
  all: TrackletFilterInput
  none: TrackletFilterInput
  some: TrackletFilterInput
  any: Boolean
}

input ListFilterInputTypeOfVideoRecordFilterInput {
  all: VideoRecordFilterInput
  none: VideoRecordFilterInput
  some: VideoRecordFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWatchlistFilterInput {
  all: WatchlistFilterInput
  none: WatchlistFilterInput
  some: WatchlistFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWatchlistInfoFilterInput {
  all: WatchlistInfoFilterInput
  none: WatchlistInfoFilterInput
  some: WatchlistInfoFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWatchlistMemberFilterInput {
  all: WatchlistMemberFilterInput
  none: WatchlistMemberFilterInput
  some: WatchlistMemberFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWatchlistMemberLabelFilterInput {
  all: WatchlistMemberLabelFilterInput
  none: WatchlistMemberLabelFilterInput
  some: WatchlistMemberLabelFilterInput
  any: Boolean
}

input ListFilterInputTypeOfWorkerFilterInput {
  all: WorkerFilterInput
  none: WorkerFilterInput
  some: WorkerFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input LivenessDataStrategyOperationFilterInput {
  eq: LivenessDataStrategy
  neq: LivenessDataStrategy
  in: [LivenessDataStrategy!]
  nin: [LivenessDataStrategy!]
}

input LivenessSpoofCheckFilterInput {
  and: [LivenessSpoofCheckFilterInput!]
  or: [LivenessSpoofCheckFilterInput!]
  performed: BooleanOperationFilterInput
  passed: BooleanOperationFilterInput
  score: FloatOperationFilterInput
  failedConditions: ListFilterInputTypeOfFailedConditionInfoFilterInput
}

input LivenessSpoofResultFilterInput {
  and: [LivenessSpoofResultFilterInput!]
  or: [LivenessSpoofResultFilterInput!]
  evaluationRequested: BooleanOperationFilterInput
  evaluationPerformed: BooleanOperationFilterInput
  evaluationPassed: BooleanOperationFilterInput
  failedConditions: ListFilterInputTypeOfFailedConditionInfoFilterInput
  score: FloatOperationFilterInput
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input MatchInfoFilterInput {
  and: [MatchInfoFilterInput!]
  or: [MatchInfoFilterInput!]
  matchResults: ListFilterInputTypeOfMatchResultInfoFilterInput
}

input MatchInformationFilterInput {
  and: [MatchInformationFilterInput!]
  or: [MatchInformationFilterInput!]
  id: UuidOperationFilterInput
  score: IntOperationFilterInput
  watchlistMemberId: StringOperationFilterInput
  displayName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  watchlistDisplayName: StringOperationFilterInput
  watchlistFullName: StringOperationFilterInput
  watchlistId: StringOperationFilterInput
  labels: ListFilterInputTypeOfMemberLabelFilterInput
  watchlistPreviewColor: StringOperationFilterInput
}

input MatchResultFilterInput {
  and: [MatchResultFilterInput!]
  or: [MatchResultFilterInput!]
  id: UuidOperationFilterInput
  type: MatchResultTypeOperationFilterInput
  watchlistMemberId: StringOperationFilterInput
  streamId: UuidOperationFilterInput
  score: IntOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  trackletId: UuidOperationFilterInput
  watchlistMemberFullName: StringOperationFilterInput
  watchlistMemberDisplayName: StringOperationFilterInput
  watchlistFullName: StringOperationFilterInput
  watchlistDisplayName: StringOperationFilterInput
  watchlistId: StringOperationFilterInput
  previewColor: StringOperationFilterInput
  faceId: UuidOperationFilterInput
  genericObjectId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceSize: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  templateQuality: IntOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
  faceQuality: IntOperationFilterInput
  sharpness: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  watchlistMember: WatchlistMemberFilterInput
  watchlist: WatchlistFilterInput
  frame: FrameFilterInput
  tracklet: TrackletFilterInput
  stream: StreamFilterInput
  face: FaceFilterInput
  genericObject: GenericObjectFilterInput
}

input MatchResultInfoFilterInput {
  and: [MatchResultInfoFilterInput!]
  or: [MatchResultInfoFilterInput!]
  matchResultId: UuidOperationFilterInput
  score: IntOperationFilterInput
  watchlist: WatchlistInfoFilterInput
}

input MatchResultInsertDTOFilterInput {
  and: [MatchResultInsertDTOFilterInput!]
  or: [MatchResultInsertDTOFilterInput!]
  score: IntOperationFilterInput
  watchlistMemberId: StringOperationFilterInput
  watchlistMemberFullName: StringOperationFilterInput
  watchlistMemberDisplayName: StringOperationFilterInput
  watchlistId: StringOperationFilterInput
  watchlistFullName: StringOperationFilterInput
  watchlistDisplayName: StringOperationFilterInput
  previewColor: StringOperationFilterInput
  labels: ListFilterInputTypeOfMemberLabelFilterInput
  id: UuidOperationFilterInput
  type: MatchResultTypeOperationFilterInput
  streamId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  clientId: StringOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceSize: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  trackletId: UuidOperationFilterInput
  faceId: UuidOperationFilterInput
  templateQuality: IntOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  faceQuality: IntOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
}

input MatchResultNotificationDTOFilterInput {
  and: [MatchResultNotificationDTOFilterInput!]
  or: [MatchResultNotificationDTOFilterInput!]
  spoofCheck: SpoofCheckFilterInput
  traceSpan: ISpanFilterInput
  traceOperationName: StringOperationFilterInput
  frameTimestampMicroseconds: LongOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  score: IntOperationFilterInput
  watchlistMemberId: StringOperationFilterInput
  watchlistMemberFullName: StringOperationFilterInput
  watchlistMemberDisplayName: StringOperationFilterInput
  watchlistId: StringOperationFilterInput
  watchlistFullName: StringOperationFilterInput
  watchlistDisplayName: StringOperationFilterInput
  previewColor: StringOperationFilterInput
  labels: ListFilterInputTypeOfMemberLabelFilterInput
  id: UuidOperationFilterInput
  type: MatchResultTypeOperationFilterInput
  streamId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  clientId: StringOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceSize: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  trackletId: UuidOperationFilterInput
  faceId: UuidOperationFilterInput
  templateQuality: IntOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  faceQuality: IntOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
}

input MatchResultSortInput {
  id: SortEnumType
  type: SortEnumType
  watchlistMemberId: SortEnumType
  streamId: SortEnumType
  score: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  processedAt: SortEnumType
  trackletId: SortEnumType
  watchlistMemberFullName: SortEnumType
  watchlistMemberDisplayName: SortEnumType
  watchlistFullName: SortEnumType
  watchlistDisplayName: SortEnumType
  watchlistId: SortEnumType
  previewColor: SortEnumType
  faceId: SortEnumType
  genericObjectId: SortEnumType
  frameId: SortEnumType
  faceArea: SortEnumType
  faceSize: SortEnumType
  faceOrder: SortEnumType
  facesOnFrameCount: SortEnumType
  faceAreaChange: SortEnumType
  faceMaskConfidence: SortEnumType
  noseTipConfidence: SortEnumType
  faceMaskStatus: SortEnumType
  yawAngle: SortEnumType
  pitchAngle: SortEnumType
  rollAngle: SortEnumType
  templateQuality: SortEnumType
  age: SortEnumType
  gender: SortEnumType
  faceQuality: SortEnumType
  sharpness: SortEnumType
  brightness: SortEnumType
  heavyFrame: SortEnumType
  glassStatus: SortEnumType
  tintedGlasses: SortEnumType
  watchlistMember: WatchlistMemberSortInput
  watchlist: WatchlistSortInput
  frame: FrameSortInput
  tracklet: TrackletSortInput
  stream: StreamSortInput
  face: FaceSortInput
  genericObject: GenericObjectSortInput
}

input MatchResultTypeOperationFilterInput {
  eq: MatchResultType
  neq: MatchResultType
  in: [MatchResultType!]
  nin: [MatchResultType!]
}

input MatchingDataStrategyOperationFilterInput {
  eq: MatchingDataStrategy
  neq: MatchingDataStrategy
  in: [MatchingDataStrategy!]
  nin: [MatchingDataStrategy!]
}

input MemberDetailsFilterInput {
  and: [MemberDetailsFilterInput!]
  or: [MemberDetailsFilterInput!]
  id: StringOperationFilterInput
  displayName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  labels: ListFilterInputTypeOfMemberLabelFilterInput
  matchedWatchlists: ListFilterInputTypeOfWatchlistInfoFilterInput
}

input MemberLabelFilterInput {
  and: [MemberLabelFilterInput!]
  or: [MemberLabelFilterInput!]
  key: StringOperationFilterInput
  value: StringOperationFilterInput
}

input ModalityOperationFilterInput {
  eq: Modality
  neq: Modality
  in: [Modality!]
  nin: [Modality!]
}

input NoMatchResultNotificationDTOFilterInput {
  and: [NoMatchResultNotificationDTOFilterInput!]
  or: [NoMatchResultNotificationDTOFilterInput!]
  traceSpan: ISpanFilterInput
  traceOperationName: StringOperationFilterInput
  frameTimestampMicroseconds: LongOperationFilterInput
  leftEyeX: FloatOperationFilterInput
  leftEyeY: FloatOperationFilterInput
  rightEyeX: FloatOperationFilterInput
  rightEyeY: FloatOperationFilterInput
  id: UuidOperationFilterInput
  type: MatchResultTypeOperationFilterInput
  streamId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  clientId: StringOperationFilterInput
  faceArea: FloatOperationFilterInput
  faceSize: FloatOperationFilterInput
  faceOrder: IntOperationFilterInput
  facesOnFrameCount: IntOperationFilterInput
  faceAreaChange: FloatOperationFilterInput
  faceMaskConfidence: FloatOperationFilterInput
  noseTipConfidence: FloatOperationFilterInput
  faceMaskStatus: FaceMaskStatusOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  trackletId: UuidOperationFilterInput
  faceId: UuidOperationFilterInput
  templateQuality: IntOperationFilterInput
  yawAngle: FloatOperationFilterInput
  pitchAngle: FloatOperationFilterInput
  rollAngle: FloatOperationFilterInput
  brightness: FloatOperationFilterInput
  sharpness: FloatOperationFilterInput
  tintedGlasses: FloatOperationFilterInput
  heavyFrame: FloatOperationFilterInput
  glassStatus: FloatOperationFilterInput
  faceQuality: IntOperationFilterInput
  age: FloatOperationFilterInput
  gender: FloatOperationFilterInput
}

input NullableOfAutolearnClusterTypeOperationFilterInput {
  eq: AutolearnClusterType
  neq: AutolearnClusterType
  in: [AutolearnClusterType]
  nin: [AutolearnClusterType]
}

input NullableOfGenderTypeOperationFilterInput {
  eq: GenderType
  neq: GenderType
  in: [GenderType]
  nin: [GenderType]
}

input ObjectAttributeFilterInput {
  and: [ObjectAttributeFilterInput!]
  or: [ObjectAttributeFilterInput!]
  type: AttributeTypeOperationFilterInput
  floatValue: FloatOperationFilterInput
  boolValue: BooleanOperationFilterInput
  visualObjectId: UuidOperationFilterInput
  visualObject: VisualObjectFilterInput
}

input ObjectAttributeListFilterInputNotification {
  and: [ObjectAttributeListFilterInputNotification!]
  or: [ObjectAttributeListFilterInputNotification!]
}

input ObjectAttributeSortInput {
  type: SortEnumType
  floatValue: SortEnumType
  boolValue: SortEnumType
  visualObjectId: SortEnumType
  visualObject: VisualObjectSortInput
}

input ObjectInformationFilterInput {
  and: [ObjectInformationFilterInput!]
  or: [ObjectInformationFilterInput!]
  id: UuidOperationFilterInput
  type: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  size: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  cropCoordinates: CropCoordinatesFilterInput
}

input ObjectInsertNotificationDTOFilterInput {
  and: [ObjectInsertNotificationDTOFilterInput!]
  or: [ObjectInsertNotificationDTOFilterInput!]
  genericObjectType: IntOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  size: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  processedAt: DateTimeOperationFilterInput
}

input ObjectProcessedNotificationDTOFilterInput {
  and: [ObjectProcessedNotificationDTOFilterInput!]
  or: [ObjectProcessedNotificationDTOFilterInput!]
  objectInformation: ObjectInformationFilterInput
  matchInformation: ListFilterInputTypeOfMatchInformationFilterInput
  frameInformation: FrameInformationFilterInput
}

input ObjectSaveStrategyOperationFilterInput {
  eq: ObjectSaveStrategy
  neq: ObjectSaveStrategy
  in: [ObjectSaveStrategy!]
  nin: [ObjectSaveStrategy!]
}

input OpticalCodeModalityInfoFilterInput {
  and: [OpticalCodeModalityInfoFilterInput!]
  or: [OpticalCodeModalityInfoFilterInput!]
  opticalCodeType: OpticalCodeTypeOperationFilterInput
}

input OpticalCodeTypeOperationFilterInput {
  eq: OpticalCodeType
  neq: OpticalCodeType
  in: [OpticalCodeType!]
  nin: [OpticalCodeType!]
}

input PalmInformationFilterInput {
  and: [PalmInformationFilterInput!]
  or: [PalmInformationFilterInput!]
  id: UuidOperationFilterInput
  trackletId: UuidOperationFilterInput
  area: FloatOperationFilterInput
  size: FloatOperationFilterInput
  quality: IntOperationFilterInput
  cropImage: ListByteOperationFilterInput
  cropCoordinates: CropCoordinatesFilterInput
}

input PalmModalityInfoFilterInput {
  and: [PalmModalityInfoFilterInput!]
  or: [PalmModalityInfoFilterInput!]
  palmInformation: PalmInformationFilterInput
  matchInfo: MatchInfoFilterInput
}

input PedestrianFilterInput {
  and: [PedestrianFilterInput!]
  or: [PedestrianFilterInput!]
  tracklet: TrackletFilterInput
  frame: FrameFilterInput
  stream: StreamFilterInput
  tenantId: StringOperationFilterInput
  objectType: IntOperationFilterInput
  pose: HumanPoseOperationFilterInput
  earLeftX: FloatOperationFilterInput
  earLeftY: FloatOperationFilterInput
  earRightX: FloatOperationFilterInput
  earRightY: FloatOperationFilterInput
  eyeLeftX: FloatOperationFilterInput
  eyeLeftY: FloatOperationFilterInput
  eyeRightX: FloatOperationFilterInput
  eyeRightY: FloatOperationFilterInput
  noseX: FloatOperationFilterInput
  noseY: FloatOperationFilterInput
  neckX: FloatOperationFilterInput
  neckY: FloatOperationFilterInput
  shoulderLeftX: FloatOperationFilterInput
  shoulderLeftY: FloatOperationFilterInput
  shoulderRightX: FloatOperationFilterInput
  shoulderRightY: FloatOperationFilterInput
  elbowLeftX: FloatOperationFilterInput
  elbowLeftY: FloatOperationFilterInput
  elbowRightX: FloatOperationFilterInput
  elbowRightY: FloatOperationFilterInput
  wristLeftX: FloatOperationFilterInput
  wristLeftY: FloatOperationFilterInput
  wristRightX: FloatOperationFilterInput
  wristRightY: FloatOperationFilterInput
  hipLeftX: FloatOperationFilterInput
  hipLeftY: FloatOperationFilterInput
  hipRightX: FloatOperationFilterInput
  hipRightY: FloatOperationFilterInput
  kneeLeftX: FloatOperationFilterInput
  kneeLeftY: FloatOperationFilterInput
  kneeRightX: FloatOperationFilterInput
  kneeRightY: FloatOperationFilterInput
  ankleLeftX: FloatOperationFilterInput
  ankleLeftY: FloatOperationFilterInput
  ankleRightX: FloatOperationFilterInput
  ankleRightY: FloatOperationFilterInput
  faceId: UuidOperationFilterInput
  face: FaceFilterInput
  facesNavigation: ListFilterInputTypeOfFaceFilterInput
  poses: ListStringOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  size: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  objectAttributes: ListFilterInputTypeOfObjectAttributeFilterInput
}

input PedestrianInformationFilterInput {
  and: [PedestrianInformationFilterInput!]
  or: [PedestrianInformationFilterInput!]
  attributes: ObjectAttributeListFilterInputNotification
  id: UuidOperationFilterInput
  trackletId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  pedestrianOrder: IntOperationFilterInput
  pedestriansOnFrameCount: IntOperationFilterInput
  size: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  cropCoordinates: CropCoordinatesFilterInput
}

input PedestrianInsertedNotificationDTOFilterInput {
  and: [PedestrianInsertedNotificationDTOFilterInput!]
  or: [PedestrianInsertedNotificationDTOFilterInput!]
  objectAttributes: ObjectAttributeListFilterInputNotification
  pose: HumanPoseOperationFilterInput
  earLeftX: FloatOperationFilterInput
  earLeftY: FloatOperationFilterInput
  earRightX: FloatOperationFilterInput
  earRightY: FloatOperationFilterInput
  eyeLeftX: FloatOperationFilterInput
  eyeLeftY: FloatOperationFilterInput
  eyeRightX: FloatOperationFilterInput
  eyeRightY: FloatOperationFilterInput
  noseX: FloatOperationFilterInput
  noseY: FloatOperationFilterInput
  neckX: FloatOperationFilterInput
  neckY: FloatOperationFilterInput
  shoulderLeftX: FloatOperationFilterInput
  shoulderLeftY: FloatOperationFilterInput
  shoulderRightX: FloatOperationFilterInput
  shoulderRightY: FloatOperationFilterInput
  elbowLeftX: FloatOperationFilterInput
  elbowLeftY: FloatOperationFilterInput
  elbowRightX: FloatOperationFilterInput
  elbowRightY: FloatOperationFilterInput
  wristLeftX: FloatOperationFilterInput
  wristLeftY: FloatOperationFilterInput
  wristRightX: FloatOperationFilterInput
  wristRightY: FloatOperationFilterInput
  hipLeftX: FloatOperationFilterInput
  hipLeftY: FloatOperationFilterInput
  hipRightX: FloatOperationFilterInput
  hipRightY: FloatOperationFilterInput
  kneeLeftX: FloatOperationFilterInput
  kneeLeftY: FloatOperationFilterInput
  kneeRightX: FloatOperationFilterInput
  kneeRightY: FloatOperationFilterInput
  ankleLeftX: FloatOperationFilterInput
  ankleLeftY: FloatOperationFilterInput
  ankleRightX: FloatOperationFilterInput
  ankleRightY: FloatOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  size: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  processedAt: DateTimeOperationFilterInput
}

input PedestrianProcessedNotificationDTOFilterInput {
  and: [PedestrianProcessedNotificationDTOFilterInput!]
  or: [PedestrianProcessedNotificationDTOFilterInput!]
  pedestrianInformation: PedestrianInformationFilterInput
  frameInformation: FrameInformationFilterInput
}

input PedestrianSaveStrategyOperationFilterInput {
  eq: PedestrianSaveStrategy
  neq: PedestrianSaveStrategy
  in: [PedestrianSaveStrategy!]
  nin: [PedestrianSaveStrategy!]
}

input PedestrianSortInput {
  tracklet: TrackletSortInput
  frame: FrameSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
  objectType: SortEnumType
  pose: SortEnumType
  earLeftX: SortEnumType
  earLeftY: SortEnumType
  earRightX: SortEnumType
  earRightY: SortEnumType
  eyeLeftX: SortEnumType
  eyeLeftY: SortEnumType
  eyeRightX: SortEnumType
  eyeRightY: SortEnumType
  noseX: SortEnumType
  noseY: SortEnumType
  neckX: SortEnumType
  neckY: SortEnumType
  shoulderLeftX: SortEnumType
  shoulderLeftY: SortEnumType
  shoulderRightX: SortEnumType
  shoulderRightY: SortEnumType
  elbowLeftX: SortEnumType
  elbowLeftY: SortEnumType
  elbowRightX: SortEnumType
  elbowRightY: SortEnumType
  wristLeftX: SortEnumType
  wristLeftY: SortEnumType
  wristRightX: SortEnumType
  wristRightY: SortEnumType
  hipLeftX: SortEnumType
  hipLeftY: SortEnumType
  hipRightX: SortEnumType
  hipRightY: SortEnumType
  kneeLeftX: SortEnumType
  kneeLeftY: SortEnumType
  kneeRightX: SortEnumType
  kneeRightY: SortEnumType
  ankleLeftX: SortEnumType
  ankleLeftY: SortEnumType
  ankleRightX: SortEnumType
  ankleRightY: SortEnumType
  faceId: SortEnumType
  face: FaceSortInput
  id: SortEnumType
  imageDataId: SortEnumType
  quality: SortEnumType
  cropLeftTopX: SortEnumType
  cropLeftTopY: SortEnumType
  cropRightTopX: SortEnumType
  cropRightTopY: SortEnumType
  cropLeftBottomX: SortEnumType
  cropLeftBottomY: SortEnumType
  cropRightBottomX: SortEnumType
  cropRightBottomY: SortEnumType
  areaOnFrame: SortEnumType
  size: SortEnumType
  objectOrderOnFrameForType: SortEnumType
  objectsOnFrameCountForType: SortEnumType
  trackletId: SortEnumType
  frameId: SortEnumType
  streamId: SortEnumType
  updatedAt: SortEnumType
  createdAt: SortEnumType
  processedAt: SortEnumType
}

input ProgressMessageDTOFilterInput {
  and: [ProgressMessageDTOFilterInput!]
  or: [ProgressMessageDTOFilterInput!]
  id: UuidOperationFilterInput
  numNewFrames: IntOperationFilterInput
  numUnprocFrames: IntOperationFilterInput
  status: ProgressStatusOperationFilterInput
}

input ProgressStatusOperationFilterInput {
  eq: ProgressStatus
  neq: ProgressStatus
  in: [ProgressStatus!]
  nin: [ProgressStatus!]
}

input ScopeFilterInput {
  and: [ScopeFilterInput!]
  or: [ScopeFilterInput!]
  id: UuidOperationFilterInput
  description: StringOperationFilterInput
  type: ScopeTypeOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  groupingMetadata: ListFilterInputTypeOfGroupingMetadataFilterInput
  tracklets: ListFilterInputTypeOfTrackletFilterInput
  frames: ListFilterInputTypeOfFrameFilterInput
  streams: ListFilterInputTypeOfStreamFilterInput
}

input ScopeSortInput {
  id: SortEnumType
  description: SortEnumType
  type: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ScopeTypeOperationFilterInput {
  eq: ScopeType
  neq: ScopeType
  in: [ScopeType!]
  nin: [ScopeType!]
}

input SearchSessionFilterInput {
  and: [SearchSessionFilterInput!]
  or: [SearchSessionFilterInput!]
  id: UuidOperationFilterInput
  threshold: IntOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  searchSessionObjects: ListFilterInputTypeOfSearchSessionObjectFilterInput
}

input SearchSessionObjectFilterInput {
  and: [SearchSessionObjectFilterInput!]
  or: [SearchSessionObjectFilterInput!]
  searchSessionId: UuidOperationFilterInput
  visualObjectId: UuidOperationFilterInput
  score: IntOperationFilterInput
  face: FaceFilterInput
}

input SearchSessionObjectSortInput {
  searchSessionId: SortEnumType
  visualObjectId: SortEnumType
  score: SortEnumType
  face: FaceSortInput
}

input SearchSessionSortInput {
  id: SortEnumType
  threshold: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ServiceFilterInput {
  and: [ServiceFilterInput!]
  or: [ServiceFilterInput!]
  id: LongOperationFilterInput
  serviceName: StringOperationFilterInput
  nodeName: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  workers: ListFilterInputTypeOfWorkerFilterInput
  serviceVideoSlots: ListFilterInputTypeOfServiceVideoSlotFilterInput
}

input ServiceSortInput {
  id: SortEnumType
  serviceName: SortEnumType
  nodeName: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input ServiceVideoSlotFilterInput {
  and: [ServiceVideoSlotFilterInput!]
  or: [ServiceVideoSlotFilterInput!]
  id: LongOperationFilterInput
  cameraId: UuidOperationFilterInput
  serviceId: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  camera: CameraFilterInput
  service: ServiceFilterInput
}

input ServiceVideoSlotSortInput {
  id: SortEnumType
  cameraId: SortEnumType
  serviceId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  camera: CameraSortInput
  service: ServiceSortInput
}

input SpoofCheckFilterInput {
  and: [SpoofCheckFilterInput!]
  or: [SpoofCheckFilterInput!]
  performed: BooleanOperationFilterInput
  passed: BooleanOperationFilterInput
  bodyPartsSpoofCheck: BodyPartsSpoofCheckFilterInput
  distantLivenessSpoofCheck: LivenessSpoofCheckFilterInput
  nearbyLivenessSpoofCheck: LivenessSpoofCheckFilterInput
  externalSpoofCheck: ExternalSpoofCheckFilterInput
}

input SpoofCheckResultFilterInput {
  and: [SpoofCheckResultFilterInput!]
  or: [SpoofCheckResultFilterInput!]
  id: UuidOperationFilterInput
  livenessNearbyPerformed: BooleanOperationFilterInput
  livenessNearbyScore: FloatOperationFilterInput
  livenessNearbyPassed: BooleanOperationFilterInput
  livenessNearbyFailedConditionsInfo: StringOperationFilterInput
  livenessDistantPerformed: BooleanOperationFilterInput
  livenessDistantScore: FloatOperationFilterInput
  livenessDistantPassed: BooleanOperationFilterInput
  livenessDistantFailedConditionsInfo: StringOperationFilterInput
  performed: BooleanOperationFilterInput
  passed: BooleanOperationFilterInput
  faceId: UuidOperationFilterInput
  face: FaceFilterInput
}

input SpoofCheckResultSortInput {
  id: SortEnumType
  livenessNearbyPerformed: SortEnumType
  livenessNearbyScore: SortEnumType
  livenessNearbyPassed: SortEnumType
  livenessNearbyFailedConditionsInfo: SortEnumType
  livenessDistantPerformed: SortEnumType
  livenessDistantScore: SortEnumType
  livenessDistantPassed: SortEnumType
  livenessDistantFailedConditionsInfo: SortEnumType
  performed: SortEnumType
  passed: SortEnumType
  faceId: SortEnumType
  face: FaceSortInput
}

input SpoofResultFilterInput {
  and: [SpoofResultFilterInput!]
  or: [SpoofResultFilterInput!]
  evaluationRequested: BooleanOperationFilterInput
  evaluationPerformed: BooleanOperationFilterInput
  evaluationPassed: BooleanOperationFilterInput
  distantLivenessSpoofCheck: LivenessSpoofResultFilterInput
  nearbyLivenessSpoofCheck: LivenessSpoofResultFilterInput
}

input StreamFilterInput {
  and: [StreamFilterInput!]
  or: [StreamFilterInput!]
  id: UuidOperationFilterInput
  scopeId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  name: StringOperationFilterInput
  sequenceNumber: LongOperationFilterInput
  cameras: ListFilterInputTypeOfCameraFilterInput
  edgeStreams: ListFilterInputTypeOfEdgeStreamFilterInput
  faces: ListFilterInputTypeOfFaceFilterInput
  pedestrians: ListFilterInputTypeOfPedestrianFilterInput
  genericObjects: ListFilterInputTypeOfGenericObjectFilterInput
  videoRecords: ListFilterInputTypeOfVideoRecordFilterInput
  tracklets: ListFilterInputTypeOfTrackletFilterInput
  frames: ListFilterInputTypeOfFrameFilterInput
  scope: ScopeFilterInput
}

input StreamInformationFilterInput {
  and: [StreamInformationFilterInput!]
  or: [StreamInformationFilterInput!]
  streamId: UuidOperationFilterInput
  clientId: StringOperationFilterInput
}

input StreamSortInput {
  id: SortEnumType
  scopeId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  description: SortEnumType
  name: SortEnumType
  sequenceNumber: SortEnumType
  scope: ScopeSortInput
}

input StreamSpoofDetectorResourceFilterInput {
  and: [StreamSpoofDetectorResourceFilterInput!]
  or: [StreamSpoofDetectorResourceFilterInput!]
  resourceId: StringOperationFilterInput
  streamId: UuidOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TagFilterInput {
  and: [TagFilterInput!]
  or: [TagFilterInput!]
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  name: StringOperationFilterInput
  videoRecords: ListFilterInputTypeOfVideoRecordFilterInput
  canBeRemoved: BooleanOperationFilterInput
}

input TagSortInput {
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  name: SortEnumType
  canBeRemoved: SortEnumType
}

input TrackletCompletedNotificationDTOFilterInput {
  and: [TrackletCompletedNotificationDTOFilterInput!]
  or: [TrackletCompletedNotificationDTOFilterInput!]
  scopeId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  timeAppeared: DateTimeOperationFilterInput
  timeDisappeared: DateTimeOperationFilterInput
  timeAppearedRelativeMs: LongOperationFilterInput
  timeDisappearedRelativeMs: LongOperationFilterInput
  streamId: UuidOperationFilterInput
  id: UuidOperationFilterInput
}

input TrackletFilterInput {
  and: [TrackletFilterInput!]
  or: [TrackletFilterInput!]
  scopeId: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  timeAppeared: DateTimeOperationFilterInput
  timeDisappeared: DateTimeOperationFilterInput
  timeAppearedRelativeMs: LongOperationFilterInput
  timeDisappearedRelativeMs: LongOperationFilterInput
  id: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  scope: ScopeFilterInput
  watchlistMembers: ListFilterInputTypeOfWatchlistMemberFilterInput
  faces: ListFilterInputTypeOfFaceFilterInput
  pedestrians: ListFilterInputTypeOfPedestrianFilterInput
  genericObjects: ListFilterInputTypeOfGenericObjectFilterInput
  individuals: ListFilterInputTypeOfIndividualFilterInput
  stream: StreamFilterInput
  matchResults: ListFilterInputTypeOfMatchResultFilterInput
  tenantId: StringOperationFilterInput
}

input TrackletSortInput {
  scopeId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  timeAppeared: SortEnumType
  timeDisappeared: SortEnumType
  timeAppearedRelativeMs: SortEnumType
  timeDisappearedRelativeMs: SortEnumType
  id: SortEnumType
  streamId: SortEnumType
  scope: ScopeSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input VideoRecordFilterInput {
  and: [VideoRecordFilterInput!]
  or: [VideoRecordFilterInput!]
  id: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  state: VideoStateOperationFilterInput
  source: StringOperationFilterInput
  enabled: BooleanOperationFilterInput
  minFaceSize: IntOperationFilterInput
  maxFaceSize: IntOperationFilterInput
  maxFaces: IntOperationFilterInput
  confidenceThreshold: IntOperationFilterInput
  redetectionTime: IntOperationFilterInput
  templateGenerationTime: IntOperationFilterInput
  faceSaveStrategy: FaceSaveStrategyOperationFilterInput
  maskImagePath: StringOperationFilterInput
  saveFrameImageData: BooleanOperationFilterInput
  imageQuality: IntOperationFilterInput
  recordedAt: DateTimeOperationFilterInput
  videoDurationMs: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  matchDetectedFaces: BooleanOperationFilterInput
  matchMaxResultsCount: IntOperationFilterInput
  description: StringOperationFilterInput
  processingStartTime: DateTimeOperationFilterInput
  processingDurationMs: LongOperationFilterInput
  stream: StreamFilterInput
  tags: ListFilterInputTypeOfTagFilterInput
}

input VideoRecordNotificationStateChangedDTOFilterInput {
  and: [VideoRecordNotificationStateChangedDTOFilterInput!]
  or: [VideoRecordNotificationStateChangedDTOFilterInput!]
  id: UuidOperationFilterInput
  state: VideoStateOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input VideoRecordSortInput {
  id: SortEnumType
  streamId: SortEnumType
  state: SortEnumType
  source: SortEnumType
  enabled: SortEnumType
  minFaceSize: SortEnumType
  maxFaceSize: SortEnumType
  maxFaces: SortEnumType
  confidenceThreshold: SortEnumType
  redetectionTime: SortEnumType
  templateGenerationTime: SortEnumType
  faceSaveStrategy: SortEnumType
  maskImagePath: SortEnumType
  saveFrameImageData: SortEnumType
  imageQuality: SortEnumType
  recordedAt: SortEnumType
  videoDurationMs: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  matchDetectedFaces: SortEnumType
  matchMaxResultsCount: SortEnumType
  description: SortEnumType
  processingStartTime: SortEnumType
  processingDurationMs: SortEnumType
  stream: StreamSortInput
}

input VideoStateOperationFilterInput {
  eq: VideoState
  neq: VideoState
  in: [VideoState!]
  nin: [VideoState!]
}

input VisualObjectFilterInput {
  and: [VisualObjectFilterInput!]
  or: [VisualObjectFilterInput!]
  objectType: IntOperationFilterInput
  id: UuidOperationFilterInput
  imageDataId: UuidOperationFilterInput
  quality: IntOperationFilterInput
  cropLeftTopX: FloatOperationFilterInput
  cropLeftTopY: FloatOperationFilterInput
  cropRightTopX: FloatOperationFilterInput
  cropRightTopY: FloatOperationFilterInput
  cropLeftBottomX: FloatOperationFilterInput
  cropLeftBottomY: FloatOperationFilterInput
  cropRightBottomX: FloatOperationFilterInput
  cropRightBottomY: FloatOperationFilterInput
  areaOnFrame: FloatOperationFilterInput
  size: FloatOperationFilterInput
  objectOrderOnFrameForType: IntOperationFilterInput
  objectsOnFrameCountForType: IntOperationFilterInput
  trackletId: UuidOperationFilterInput
  frameId: UuidOperationFilterInput
  streamId: UuidOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  processedAt: DateTimeOperationFilterInput
  tracklet: TrackletFilterInput
  frame: FrameFilterInput
  stream: StreamFilterInput
  tenantId: StringOperationFilterInput
  objectAttributes: ListFilterInputTypeOfObjectAttributeFilterInput
}

input VisualObjectSortInput {
  objectType: SortEnumType
  id: SortEnumType
  imageDataId: SortEnumType
  quality: SortEnumType
  cropLeftTopX: SortEnumType
  cropLeftTopY: SortEnumType
  cropRightTopX: SortEnumType
  cropRightTopY: SortEnumType
  cropLeftBottomX: SortEnumType
  cropLeftBottomY: SortEnumType
  cropRightBottomX: SortEnumType
  cropRightBottomY: SortEnumType
  areaOnFrame: SortEnumType
  size: SortEnumType
  objectOrderOnFrameForType: SortEnumType
  objectsOnFrameCountForType: SortEnumType
  trackletId: SortEnumType
  frameId: SortEnumType
  streamId: SortEnumType
  updatedAt: SortEnumType
  createdAt: SortEnumType
  processedAt: SortEnumType
  tracklet: TrackletSortInput
  frame: FrameSortInput
  stream: StreamSortInput
  tenantId: SortEnumType
}

input WatchlistFilterInput {
  and: [WatchlistFilterInput!]
  or: [WatchlistFilterInput!]
  id: StringOperationFilterInput
  displayName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  threshold: IntOperationFilterInput
  palmThreshold: IntOperationFilterInput
  previewColor: StringOperationFilterInput
  watchlistMembers: ListFilterInputTypeOfWatchlistMemberFilterInput
  matchResults: ListFilterInputTypeOfMatchResultFilterInput
  edgeStreams: ListFilterInputTypeOfEdgeStreamFilterInput
  tenantId: StringOperationFilterInput
}

input WatchlistInfoFilterInput {
  and: [WatchlistInfoFilterInput!]
  or: [WatchlistInfoFilterInput!]
  id: StringOperationFilterInput
  displayName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  previewColor: StringOperationFilterInput
}

input WatchlistMemberFilterInput {
  and: [WatchlistMemberFilterInput!]
  or: [WatchlistMemberFilterInput!]
  id: StringOperationFilterInput
  displayName: StringOperationFilterInput
  fullName: StringOperationFilterInput
  note: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  trackletId: UuidOperationFilterInput
  maskedAveragedWildTemplate: ListByteOperationFilterInput
  notMaskedAveragedWildTemplate: ListByteOperationFilterInput
  totpEnabled: BooleanOperationFilterInput
  watchlists: ListFilterInputTypeOfWatchlistFilterInput
  labels: ListFilterInputTypeOfWatchlistMemberLabelFilterInput
  tracklet: TrackletFilterInput
  matchResults: ListFilterInputTypeOfMatchResultFilterInput
}

input WatchlistMemberLabelFilterInput {
  and: [WatchlistMemberLabelFilterInput!]
  or: [WatchlistMemberLabelFilterInput!]
  watchlistMemberId: UuidOperationFilterInput
  key: StringOperationFilterInput
  value: StringOperationFilterInput
  watchlistMember: WatchlistMemberFilterInput
}

input WatchlistMemberLabelSortInput {
  watchlistMemberId: SortEnumType
  key: SortEnumType
  value: SortEnumType
  watchlistMember: WatchlistMemberSortInput
}

input WatchlistMemberSortInput {
  id: SortEnumType
  displayName: SortEnumType
  fullName: SortEnumType
  note: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  trackletId: SortEnumType
  totpEnabled: SortEnumType
  tracklet: TrackletSortInput
  tenantId: SortEnumType
}

input WatchlistSortInput {
  id: SortEnumType
  displayName: SortEnumType
  fullName: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  threshold: SortEnumType
  palmThreshold: SortEnumType
  previewColor: SortEnumType
  tenantId: SortEnumType
}

input WatchlistSyncOptionOperationFilterInput {
  eq: WatchlistSyncOption
  neq: WatchlistSyncOption
  in: [WatchlistSyncOption!]
  nin: [WatchlistSyncOption!]
}

input WorkerFilterInput {
  and: [WorkerFilterInput!]
  or: [WorkerFilterInput!]
  id: LongOperationFilterInput
  enabled: BooleanOperationFilterInput
  workerType: WorkerTypeOperationFilterInput
  description: StringOperationFilterInput
  serviceId: LongOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  service: ServiceFilterInput
}

input WorkerSortInput {
  id: SortEnumType
  enabled: SortEnumType
  workerType: SortEnumType
  description: SortEnumType
  serviceId: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  service: ServiceSortInput
}

input WorkerTypeOperationFilterInput {
  eq: WorkerType
  neq: WorkerType
  in: [WorkerType!]
  nin: [WorkerType!]
}

enum AttributeType {
  HAT
  GLASSES
  SHORT_SLEEVE
  LONG_SLEEVE
  UPPER_STRIPE
  UPPER_LOGO
  UPPER_PLAID
  UPPER_SPLICE
  LOWER_STRIPE
  LOWER_PATTERN
  LONG_COAT
  TROUSERS
  SHORTS
  SKIRT_OR_DRESS
  BOOTS
  HAND_BAG
  SHOULDER_BAG
  BACKPACK
  HOLD_OBJECTS_IN_FRONT
  IS_SENIOR
  IS_ADULT
  IS_CHILD
  IS_MALE
  IS_FEMALE
  FRONT
  SIDE
  BACK
  HAT_CONFIDENCE
  GLASSES_CONFIDENCE
  SHORT_SLEEVE_CONFIDENCE
  LONG_SLEEVE_CONFIDENCE
  UPPER_STRIPE_CONFIDENCE
  UPPER_LOGO_CONFIDENCE
  UPPER_PLAID_CONFIDENCE
  UPPER_SPLICE_CONFIDENCE
  LOWER_STRIPE_CONFIDENCE
  LOWER_PATTERN_CONFIDENCE
  LONG_COAT_CONFIDENCE
  TROUSERS_CONFIDENCE
  SHORTS_CONFIDENCE
  SKIRT_OR_DRESS_CONFIDENCE
  BOOTS_CONFIDENCE
  HAND_BAG_CONFIDENCE
  SHOULDER_BAG_CONFIDENCE
  BACKPACK_CONFIDENCE
  HOLD_OBJECTS_IN_FRONT_CONFIDENCE
  IS_SENIOR_CONFIDENCE
  IS_ADULT_CONFIDENCE
  IS_CHILD_CONFIDENCE
  FEMALE_CONFIDENCE
  FRONT_CONFIDENCE
  SIDE_CONFIDENCE
  BACK_CONFIDENCE
}

enum AutolearnClusterType {
  MASKED
  NOT_MASKED
}

enum EdgeStreamFaceDetectionOrderBy {
  DETECTION_CONFIDENCE
  FACE_SIZE
}

enum EdgeStreamFaceLivenessConditionParameter {
  FACE_SIZE
  FACE_RELATIVE_AREA
  FACE_RELATIVE_AREA_IN_IMAGE
  YAW_ANGLE
  PITCH_ANGLE
  ROLL_ANGLE
  SHARPNESS
  BRIGHTNESS
  CONTRAST
}

enum EdgeStreamImageFormat {
  RAW
  JPEG
  PNG
}

enum EdgeStreamLivenessStrategy {
  ON_EACH_EXTRACTED_FACE
  ON_EACH_IDENTIFIED_FACE
}

enum EdgeStreamMessagingStrategy {
  ON_NEW_AND_INTERVAL
  ON_NEW_AND_INTERVAL_BEST
}

enum FaceMaskStatus {
  UNKNOWN
  MASK
  NO_MASK
}

enum FaceSaveStrategy {
  ALL
  FIRST_FACE
  BEST_FACE
  FIRST_FACE_BEST_FACE
  MATCHED_ONLY
  BALANCED
  NONE
}

enum FaceState {
  NEW
  EXTRACTING
  EXTRACTED
  ERROR
}

enum FaceType {
  REGULAR
  AUTO_LEARN
}

enum FrameState {
  NEW
  PROCESSING
  PROCESSED
  ERROR
}

enum GenderType {
  MALE
  FEMALE
}

enum GroupingState {
  READY
  PROCESSING
  PENDING
  ERROR
}

enum HealthStatus {
  ONLINE
  OFFLINE
  OFFLINE_DISCONNECTED
}

enum HumanPose {
  UNSPECIFIED
  HANDS_IN_FRONT_OF_FACE
}

enum IdentificationEventType {
  IDENTIFIED
  NOT_IDENTIFIED
  REJECTED
}

enum LicenseStatus {
  NOT_PROVIDED
  VALID
  NOT_VALID
  EXPIRED
}

enum LivenessDataStrategy {
  EDGE_STREAM_ONLY
  SERVER_ONLY
}

enum MatchResultType {
  MATCH
  NO_MATCH
}

enum MatchingDataStrategy {
  EDGE_STREAM_ONLY
  SERVER_ONLY
}

enum Modality {
  FACE
  OPTICAL_CODE
  PALM
}

enum ObjectSaveStrategy {
  ALL
  BEST
  BALANCED
  MATCHED_ONLY
  NONE
}

enum OpticalCodeType {
  QR_CODE
}

enum PedestrianSaveStrategy {
  ALL
  BEST
  BALANCED
  NONE
}

enum ProgressStatus {
  PROCESSING
  READY
}

enum ScopeType {
  EVENT
  LOCATION
  WATCHLIST
  DEFAULT_VIDEO
}

enum SortEnumType {
  ASC
  DESC
}

enum VideoState {
  READY
  PROCESSING
  PROCESSED
  ERROR
}

enum WatchlistSyncOption {
  NONE
  ALL
  SELECTED
}

enum WorkerType {
  CONTINUOUS_GROUPING_WORKER @deprecated
  GROUPING_WORKER @deprecated
  DATA_DISTRIBUTION_WORKER @deprecated(reason: "Since we use S3 as blob storage, we don't need data distribution worker anymore.")
  PROGRESS_INFO_WORKER
  DETECT_FACE_WORKER @deprecated
  EXTRACT_FACE_WORKER @deprecated
  STREAM_WORKER
  VIDEO_PUBLISH_WORKER
  DB_CLEANUP_WORKER
  STILL_PICTURE_DATABASE_WORKER
  STREAM_DATA_DB_WORKER @deprecated
  WATCHLIST_AUTO_LEARN_WORKER
  SEARCH_SESSIONS_CLEANUP_WORKER
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

scalar ByteArray

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")