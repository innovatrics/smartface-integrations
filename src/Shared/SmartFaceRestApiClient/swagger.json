
{
    "openapi": "3.0.1",
    "info": {
      "title": "SmartFace REST API",
      "version": "v5_4.27.0.6834"
    },
    "paths": {
      "/api/v1/EdgeStreams/{id}": {
        "get": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Retrieves the EdgeStream by its Id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the EdgeStream.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found EdgeStream.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeStream"
                  }
                }
              }
            },
            "404": {
              "description": "The EdgeStream with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Deletes a EdgeStream by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the EdgeStream.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The EdgeStream with given id was deleted successfully."
            },
            "404": {
              "description": "The EdgeStream with given id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/EdgeStreams": {
        "get": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Retrieves all EdgeStreams.",
          "responses": {
            "200": {
              "description": "Returns the found EdgeStreams.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EdgeStream"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Creates a new EdgeStream.",
          "description": "Supported values for ```TemplateGeneratorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any\r\n            \r\nSupported values for ```FaceSaveStrategy``` are:<br />\r\n\r\n    Balanced, All, MatchedOnly\r\n            \r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote",
          "requestBody": {
            "description": "New EdgeStream configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamCreateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamCreateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamCreateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamCreateRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "The new EdgeStream was created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeStream"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict while creating the EdgeStream.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Updates the specified EdgeStream.",
          "description": "Supported values for ```TemplateGeneratorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any\r\n\r\nSupported values for ```FaceSaveStrategy``` are:<br />\r\n\r\n    Balanced, All, MatchedOnly\r\n            \r\nSupported values for ```SpoofDetectorResourceIds``` are:\r\n            \r\n    none, liveness_distant_cpu_remote, liveness_distant_gpu_remote, liveness_distant_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote, liveness_nearby_any_remote",
          "requestBody": {
            "description": "New EdgeStream configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns the newly updated EdgeStream.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeStream"
                  }
                }
              }
            },
            "404": {
              "description": "The EdgeStream was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/EdgeStreams/{id}/WatchlistSynchronization": {
        "put": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Sets the watchlist synchronization for the specified EdgeStream.",
          "description": "Supported values for ```watchlistSyncOption``` are: <br />\r\n\r\n    None, All, Selected",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "description": "Settings for watchlist synchronization",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronizationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronization"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "EdgeStream"
          ],
          "summary": "Retrieves watchlist synchronization settings for the specified EdgeStream.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found settings.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EdgeStreamWatchlistSynchronization"
                  }
                }
              }
            },
            "404": {
              "description": "The EdgeStream with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Faces/{id}": {
        "get": {
          "tags": [
            "Face"
          ],
          "summary": "Retrieves the face by its Id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the face.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found face.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Face"
                  }
                }
              }
            },
            "404": {
              "description": "The face with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Face"
          ],
          "summary": "Deletes the face by its Id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the face to delete.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The face with given Id was deleted successfully."
            },
            "404": {
              "description": "The face with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Faces": {
        "get": {
          "tags": [
            "Face"
          ],
          "summary": "Retrieves faces as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found faces.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FacePagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Faces/Search": {
        "post": {
          "tags": [
            "Face"
          ],
          "summary": "Searches for similar stored faces based on the given image.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any",
          "requestBody": {
            "description": "Request containing reference image to be searched.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceSearchRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceSearchRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceSearchRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceSearchRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns the face match results.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchInFacesResponse"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Faces/SpoofCheck": {
        "post": {
          "tags": [
            "Face"
          ],
          "summary": "Checks liveness of one face on the given image.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:<br />\r\n            \r\n    liveness_distant_any_remote, liveness_distant_cpu_remote, liveness_distant_gpu_remote\r\n    liveness_nearby_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote\r\n <br />```SpoofCheckConfig.KeepEvaluatingConditionsAfterFirstFail``` is used\r\n\r\n to evaluate all conditions supplied with ``` Nearby/Distant LivenessConditions ```.\r\n\r\n When ```true``` it can have slight performance impact, because all conditions are evaluated <br />",
          "requestBody": {
            "description": "Request containing reference image to be checked and configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoofCheckRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoofCheckRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoofCheckRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SpoofCheckRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns the liveness result.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SpoofCheckResponse"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Faces/Verify": {
        "post": {
          "tags": [
            "Face"
          ],
          "summary": "Calculates confidence that two faces on sent photos belong to the same person.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:<br />\r\n            \r\n    cpu, gpu, any",
          "requestBody": {
            "description": "Request containing images with faces to be compared",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns the verification result.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VerificationResponse"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Frames/{id}": {
        "get": {
          "tags": [
            "Frame"
          ],
          "summary": "Retrieves the frame by its Id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the frame.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found frame.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Frame"
                  }
                }
              }
            },
            "404": {
              "description": "The frame with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Frame"
          ],
          "summary": "Deletes the frame by its Id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the frame to delete.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The frame with given Id was deleted successfully."
            },
            "404": {
              "description": "The frame with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Frames": {
        "get": {
          "tags": [
            "Frame"
          ],
          "summary": "Retrieves frames as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found frames.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FramePagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Images/{id}": {
        "get": {
          "tags": [
            "Image"
          ],
          "summary": "Retrieves the image by its Id.",
          "description": "Two optional parameters can be specified that allow the image to be resize to given values.\r\nMore specifically, minSize will resize the smaller edge to minSize, maxSize will resize the larger edge to maxSize.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the image.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "minSize",
              "in": "query",
              "description": "Minimum size of the smaller edge.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "maxSize",
              "in": "query",
              "description": "Maximum size of the larger edge.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns requested image",
              "content": {
                "image/jpeg": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "404": {
              "description": "The image with given Id was not found."
            },
            "400": {
              "description": "The sent request was not valid."
            }
          }
        }
      },
      "/api/v1/Setup/DataStorage/Video": {
        "get": {
          "tags": [
            "SetupDataStorage"
          ],
          "summary": "Retrieves the current video data storage config.",
          "responses": {
            "200": {
              "description": "Video data storage config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VideoDataStorageConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Video data storage config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupDataStorage"
          ],
          "summary": "Updates the video data storage config with specified values.",
          "requestBody": {
            "description": "The new video data storage configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoDataStorageConfig"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Video data storage config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VideoDataStorageConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Video data storage config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Setup/DbCleanup": {
        "get": {
          "tags": [
            "SetupDbCleanup"
          ],
          "summary": "Retrieves current database cleanup config.",
          "responses": {
            "200": {
              "description": "Database cleanup config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DbCleanupConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Database cleanup config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupDbCleanup"
          ],
          "summary": "Updates the database cleanup config with specified values.",
          "requestBody": {
            "description": "The new database cleanup configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DbCleanupConfigUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Database cleanup config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DbCleanupConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Database cleanup config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Setup/Features": {
        "get": {
          "tags": [
            "SetupFeatures"
          ],
          "summary": "Retrieves current features config.",
          "responses": {
            "200": {
              "description": "Features config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FaceFeaturesConfigFeaturesConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Features config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupFeatures"
          ],
          "summary": "Updates the features config with specified values.",
          "requestBody": {
            "description": "The new features configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FeaturesConfigUpdateRequestFeaturesConfig"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Features config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FaceFeaturesConfigFeaturesConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Features config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Setup/Preview": {
        "get": {
          "tags": [
            "SetupPreview"
          ],
          "summary": "Retrieves current preview config.",
          "responses": {
            "200": {
              "description": "Preview config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreviewConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Preview config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupPreview"
          ],
          "summary": "Updates the preview config with specified values.",
          "description": "Default value for FaceBoundingBoxColor is ```#ecec5e```\r\n\r\nDefault value for PedestrianBoundingBoxColor is ```#80b5ff```\r\n\r\nDefault value for ObjectBoundingBoxColor is ```#e638d3```",
          "requestBody": {
            "description": "The new preview configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewConfig"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Preview config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PreviewConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Preview config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Setup/SearchSessionsCleanup": {
        "get": {
          "tags": [
            "SetupSearchSessionsCleanup"
          ],
          "summary": "Retrieves current search sessions cleanup config.",
          "responses": {
            "200": {
              "description": "Search sessions cleanup config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Search sessions cleanup config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupSearchSessionsCleanup"
          ],
          "summary": "Updates the search sessions cleanup config with specified values.",
          "requestBody": {
            "description": "The new search sessions cleanup configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Search sessions cleanup config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SearchSessionsCleanupConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Search sessions cleanup config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Setup/Watchlists/AutoLearn": {
        "get": {
          "tags": [
            "SetupWatchlistAutoLearn"
          ],
          "summary": "Retrieves the current watchlist autolearn config.",
          "responses": {
            "200": {
              "description": "Watchlist autolearn config was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Watchlist autolearn config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "SetupWatchlistAutoLearn"
          ],
          "summary": "Updates the watchlist autolearn config with specified values.",
          "requestBody": {
            "description": "The new watchlist autolearn configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Watchlist autolearn config was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistAutoLearnConfig"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Watchlist autolearn config was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Tracklet/{id}": {
        "get": {
          "tags": [
            "Tracklet"
          ],
          "summary": "Retrieves the tracklet by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the tracklet.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Tracklet was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tracklet"
                  }
                }
              }
            },
            "404": {
              "description": "The tracklet with specified id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tracklet"
          ],
          "summary": "Deletes the tracklets by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the tracklet to delete.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The tracklet with given Id was deleted successfully."
            },
            "404": {
              "description": "The tracklet with given Id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Tracklet": {
        "get": {
          "tags": [
            "Tracklet"
          ],
          "summary": "Retrieves tracklets as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found tracklets.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TrackletPagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Tracklet/{id}/Faces": {
        "get": {
          "tags": [
            "Tracklet"
          ],
          "summary": "Retrieves faces for given tracklet id as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the tracklet.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found faces.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FacePagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Version": {
        "get": {
          "tags": [
            "Version"
          ],
          "summary": "Retrieves the version information.",
          "responses": {
            "200": {
              "description": "Version information was returned successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VersionInfo"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Watchlists": {
        "get": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Retrieves the watchlists as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found watchlists.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistPagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Creates a new watchlist.",
          "description": "When setting ```PreviewColor```, hexadecimal format is necessary to use, e.g. ```#012abc``` or ```#01a```.",
          "requestBody": {
            "description": "Request containing watchlist name and threshold.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistCreateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistCreateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistCreateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistCreateRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Watchlist was created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Watchlist"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict while creating the new watchlist.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Upserts the watchlist.",
          "description": "If the watchlist with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist with specified Id exists, it updates it.<br />\r\nWhen setting ```PreviewColor```, hexadecimal format is necessary to use, e.g. ```#012abc``` or ```#01a```.",
          "requestBody": {
            "description": "Request containing watchlist properties.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistUpsertRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistUpsertRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistUpsertRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistUpsertRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Watchlist was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Watchlist"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Watchlists/{id}": {
        "get": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Retrieves the watchlist by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found watchlist.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Watchlist"
                  }
                }
              }
            },
            "404": {
              "description": "The watchlist with given id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Deletes a watchlist by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The watchlist with given id was deleted successfully."
            },
            "404": {
              "description": "The watchlist with given id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Watchlists/{id}/WatchlistMembers": {
        "get": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Retrieves the watchlist members belonging to a watchlist with specified watchlist id as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found watchlist members.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/Watchlists/Search": {
        "post": {
          "tags": [
            "Watchlist"
          ],
          "summary": "Searches the specified watchlists for matches with the given image.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any\r\n            \r\nSupported values for ```SpoofDetectorResourceId``` are:<br />\r\n            \r\n    none,\r\n    liveness_distant_any_remote, liveness_distant_cpu_remote, liveness_distant_gpu_remote\r\n    liveness_nearby_any_remote, liveness_nearby_cpu_remote, liveness_nearby_gpu_remote",
          "requestBody": {
            "description": "Request containing searching image and ids of watchlists to be searched.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInWatchlistRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInWatchlistRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInWatchlistRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchInWatchlistRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Returns the match results.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SearchInWatchlistResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "Watchlists with specified ids were not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers": {
        "get": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Retrieves the watchlist members as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found watchlist members.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMemberPagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Creates a new watchlist member.",
          "requestBody": {
            "description": "Request specifying watchlist member properties.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberCreateRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Watchlist member was created successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMember"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict while creating the new watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Upserts the watchlist member.",
          "description": "If the watchlist member with specified Id does not exist, it creates it with the requested Id.\r\nIf the watchlist member with specified Id exists, it updates it.",
          "requestBody": {
            "description": "Request specifying which watchlist member should be updated and how to update it.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMemberUpsertRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Watchlist member was updated successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMember"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/{id}": {
        "get": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Retrieves the watchlist member by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist member.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMember"
                  }
                }
              }
            },
            "404": {
              "description": "The watchlist member with given id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Deletes a watchlist member by its id.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist member.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "The watchlist member with given id was deleted successfully."
            },
            "404": {
              "description": "The watchlist member with given id was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/{id}/Faces": {
        "get": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Retrieves faces for given watchlist member id as a paged collection.",
          "description": "Page number, page size and sorting order can be specified. You can also show total items count.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id of the watchlist member.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Ascending",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "PageNumber",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "PageSize",
              "in": "query",
              "schema": {
                "maximum": 2147483647,
                "minimum": 1,
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "ShowTotalCount",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the found faces.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FacePagedCollection"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/LinkToWatchlist": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Links specified watchlist members to a given watchlist.",
          "requestBody": {
            "description": "Request specifying watchlist member ids and watchlist id",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Watchlist members were successfully linked to the watchlist."
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "The watchlist or watchlist members were not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/UnlinkFromWatchlist": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Unlinks specified watchlist members for a given watchlist.",
          "requestBody": {
            "description": "Request specifying watchlist member ids and watchlist id",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchlistMembersLinkRequest"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "Watchlist members were successfully unlinked from the watchlist."
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "The watchlist or watchlist members were not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/Register": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Registers a watchlist member.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n\r\nSupported values for ```TemplateGeneratorResourceId``` are:<br />\r\n\r\n    cpu, gpu, any",
          "requestBody": {
            "description": "Request specifying watchlist member register details.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterWatchlistMemberRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Watchlist members was registered successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WatchlistMemberWithRelatedData"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict during the registration of the watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "429": {
              "description": "Too many requests.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/{id}/AddFaceFromSystem": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Adds a specified face to a given watchlist member.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The watchlist member id.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request specifying face id to add.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberLinkingRequest"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "The face was successfully added to the watchlist member."
            },
            "404": {
              "description": "The face or watchlist member were not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict adding the specified face to the watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/{id}/AddNewFace": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Adds a specified face to a given watchlist member.",
          "description": "Supported values for ```FaceDetectorResourceId``` are:<br />\r\n            \r\n    cpu, gpu, any, accurate_cpu, accurate_gpu, accurate_any\r\n            \r\nSupported values for ```TemplateGeneratorResourceId``` are:<br />\r\n            \r\n    cpu, gpu, any",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The watchlist member id.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The image with face to add with configuration.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewFaceRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewFaceRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewFaceRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNewFaceRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "The created face which was added to the watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Face"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "404": {
              "description": "The watchlist member were not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "409": {
              "description": "There was a conflict adding the new face to the watchlist member.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/WatchlistMembers/{id}/RemoveFace": {
        "post": {
          "tags": [
            "WatchlistMember"
          ],
          "summary": "Removes a face from a watchlist member.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The watchlist member id.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request specifying face id to remove.",
            "content": {
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FaceWatchlistMemberRemoveRequest"
                }
              }
            }
          },
          "responses": {
            "204": {
              "description": "The face was successfully removed from watchlist member."
            },
            "404": {
              "description": "The face or watchlist member was not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "The sent request was not valid.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "408": {
              "description": "Request has timed out.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AddNewFaceRequest": {
          "required": [
            "imageData"
          ],
          "type": "object",
          "properties": {
            "imageData": {
              "$ref": "#/components/schemas/RegistrationImageData"
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string"
            },
            "templateGeneratorResourceId": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "DbCleanupConfig": {
          "required": [
            "cleanupAmount",
            "cleanupStart",
            "deleteMatchResults",
            "deleteSql",
            "enabled",
            "maxFramesCount",
            "maxImageDataAge"
          ],
          "type": "object",
          "properties": {
            "cleanupAmount": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "deprecated": true
            },
            "enabled": {
              "type": "boolean"
            },
            "maxFramesCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "maxImageDataAge": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "cleanupStart": {
              "type": "string",
              "format": "date-span",
              "nullable": true
            },
            "deleteSql": {
              "type": "boolean",
              "nullable": true
            },
            "deleteMatchResults": {
              "type": "boolean",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "DbCleanupConfigUpdateRequest": {
          "required": [
            "cleanupStart",
            "deleteMatchResults",
            "deleteSql",
            "enabled",
            "maxFramesCount",
            "maxImageDataAge"
          ],
          "type": "object",
          "properties": {
            "cleanupAmount": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "deprecated": true
            },
            "enabled": {
              "type": "boolean"
            },
            "maxFramesCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "maxImageDataAge": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "cleanupStart": {
              "type": "string",
              "format": "date-span",
              "nullable": true
            },
            "deleteSql": {
              "type": "boolean",
              "nullable": true
            },
            "deleteMatchResults": {
              "type": "boolean",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStream": {
          "required": [
            "clientId",
            "enabled",
            "faceSaveStrategy",
            "id",
            "name",
            "saveFrameImageData",
            "settings",
            "spoofDetectorConfig",
            "spoofDetectorResourceIds",
            "templateGeneratorResourceId"
          ],
          "type": "object",
          "properties": {
            "spoofDetectorResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "clientId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "saveFrameImageData": {
              "type": "boolean"
            },
            "templateGeneratorResourceId": {
              "type": "string"
            },
            "faceSaveStrategy": {
              "type": "string"
            },
            "spoofDetectorConfig": {
              "$ref": "#/components/schemas/SpoofDetectorConfig"
            },
            "settings": {
              "$ref": "#/components/schemas/EdgeStreamSettings"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamCreateRequest": {
          "required": [
            "clientId",
            "name"
          ],
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false
            },
            "name": {
              "type": "string",
              "default": "unspecified"
            },
            "clientId": {
              "type": "string"
            },
            "saveFrameImageData": {
              "type": "boolean",
              "default": false
            },
            "templateGeneratorResourceId": {
              "type": "string",
              "default": "cpu",
              "nullable": true
            },
            "faceSaveStrategy": {
              "type": "string",
              "default": "FirstFace, BestFace",
              "nullable": true
            },
            "spoofDetectorResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "none"
              ],
              "nullable": true
            },
            "spoofDetectorConfig": {
              "$ref": "#/components/schemas/EdgeStreamSpoofDetectorConfigCreateRequest"
            },
            "settings": {
              "$ref": "#/components/schemas/EdgeStreamSettingsCreateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionCropSettings": {
          "required": [
            "enable",
            "imageFormat",
            "imageQuality",
            "maxSize"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "maxSize": {
              "type": "number",
              "format": "float"
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionCropSettingsCreateRequest": {
          "required": [
            "enable",
            "imageFormat",
            "imageQuality",
            "maxSize"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "maxSize": {
              "type": "number",
              "format": "float",
              "default": 50
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float",
              "default": 90
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionCropSettingsUpdateRequest": {
          "required": [
            "enable",
            "imageFormat",
            "imageQuality",
            "maxSize"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "maxSize": {
              "type": "number",
              "format": "float",
              "default": 50
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float",
              "default": 90
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionOrderBy": {
          "enum": [
            "DetectionConfidence",
            "FaceSize"
          ],
          "type": "string"
        },
        "EdgeStreamFaceDetectionSettings": {
          "required": [
            "crop",
            "enable",
            "maxDetections",
            "maxFaceSize",
            "minFaceSize",
            "orderBy",
            "tracking"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "maxDetections": {
              "type": "integer",
              "format": "int32"
            },
            "minFaceSize": {
              "type": "number",
              "format": "float"
            },
            "maxFaceSize": {
              "type": "number",
              "format": "float"
            },
            "orderBy": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
            },
            "tracking": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettings"
            },
            "crop": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettings"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionSettingsCreateRequest": {
          "required": [
            "crop",
            "enable",
            "maxDetections",
            "maxFaceSize",
            "minFaceSize",
            "orderBy",
            "tracking"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "maxDetections": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "minFaceSize": {
              "type": "number",
              "format": "float",
              "default": 20
            },
            "maxFaceSize": {
              "type": "number",
              "format": "float",
              "default": 200
            },
            "orderBy": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
            },
            "tracking": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettingsCreateRequest"
            },
            "crop": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettingsCreateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionSettingsUpdateRequest": {
          "required": [
            "crop",
            "enable",
            "maxDetections",
            "maxFaceSize",
            "minFaceSize",
            "orderBy",
            "tracking"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "maxDetections": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "minFaceSize": {
              "type": "number",
              "format": "float",
              "default": 20
            },
            "maxFaceSize": {
              "type": "number",
              "format": "float",
              "default": 200
            },
            "orderBy": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionOrderBy"
            },
            "tracking": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionTrackingSettingsUpdateRequest"
            },
            "crop": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionCropSettingsUpdateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionTrackingSettings": {
          "required": [
            "inputThreshold",
            "maxFramesLost",
            "outputThreshold",
            "stability"
          ],
          "type": "object",
          "properties": {
            "outputThreshold": {
              "type": "number",
              "format": "float"
            },
            "inputThreshold": {
              "type": "number",
              "format": "float"
            },
            "stability": {
              "type": "number",
              "format": "float"
            },
            "maxFramesLost": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionTrackingSettingsCreateRequest": {
          "required": [
            "inputThreshold",
            "maxFramesLost",
            "outputThreshold",
            "stability"
          ],
          "type": "object",
          "properties": {
            "outputThreshold": {
              "type": "number",
              "format": "float",
              "default": 1500
            },
            "inputThreshold": {
              "type": "number",
              "format": "float",
              "default": 1000
            },
            "stability": {
              "type": "number",
              "format": "float",
              "default": 85
            },
            "maxFramesLost": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceDetectionTrackingSettingsUpdateRequest": {
          "required": [
            "inputThreshold",
            "maxFramesLost",
            "outputThreshold",
            "stability"
          ],
          "type": "object",
          "properties": {
            "outputThreshold": {
              "type": "number",
              "format": "float",
              "default": 1500
            },
            "inputThreshold": {
              "type": "number",
              "format": "float",
              "default": 1000
            },
            "stability": {
              "type": "number",
              "format": "float",
              "default": 85
            },
            "maxFramesLost": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceExtractionSettings": {
          "required": [
            "enable"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceExtractionSettingsCreateRequest": {
          "required": [
            "enable"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceExtractionSettingsUpdateRequest": {
          "required": [
            "enable"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceIdentificationSettings": {
          "required": [
            "enable",
            "threshold"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "threshold": {
              "type": "number",
              "format": "float"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceIdentificationSettingsCreateRequest": {
          "required": [
            "enable",
            "threshold"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "threshold": {
              "type": "number",
              "format": "float",
              "default": 40
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceIdentificationSettingsUpdateRequest": {
          "required": [
            "enable",
            "threshold"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "threshold": {
              "type": "number",
              "format": "float",
              "default": 40
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceLivenessPassiveCondition": {
          "required": [
            "lowerThreshold",
            "parameter",
            "upperThreshold"
          ],
          "type": "object",
          "properties": {
            "parameter": {
              "type": "string"
            },
            "lowerThreshold": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "upperThreshold": {
              "type": "number",
              "format": "float",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceLivenessPassiveSettings": {
          "required": [
            "conditions",
            "enable",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
              }
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceLivenessPassiveSettingsCreateRequest": {
          "required": [
            "conditions",
            "enable",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": false
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
              }
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFaceLivenessPassiveSettingsUpdateRequest": {
          "required": [
            "conditions",
            "enable",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": false
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamLivenessStrategy"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveCondition"
              }
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFullFrameSettings": {
          "required": [
            "imageFormat",
            "imageHeight",
            "imageQuality",
            "imageWidth"
          ],
          "type": "object",
          "properties": {
            "imageWidth": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "imageHeight": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFullFrameSettingsCreateRequest": {
          "required": [
            "imageFormat",
            "imageQuality"
          ],
          "type": "object",
          "properties": {
            "imageWidth": {
              "type": "integer",
              "format": "int32",
              "default": null,
              "nullable": true
            },
            "imageHeight": {
              "type": "integer",
              "format": "int32",
              "default": null,
              "nullable": true
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float",
              "default": 90
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamFullFrameSettingsUpdateRequest": {
          "required": [
            "imageFormat",
            "imageQuality"
          ],
          "type": "object",
          "properties": {
            "imageWidth": {
              "type": "integer",
              "format": "int32",
              "default": null,
              "nullable": true
            },
            "imageHeight": {
              "type": "integer",
              "format": "int32",
              "default": null,
              "nullable": true
            },
            "imageFormat": {
              "$ref": "#/components/schemas/EdgeStreamImageFormat"
            },
            "imageQuality": {
              "type": "number",
              "format": "float",
              "default": 90
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamImageFormat": {
          "enum": [
            "Raw",
            "Jpeg",
            "Png"
          ],
          "type": "string"
        },
        "EdgeStreamLicenseSettingsCreateRequest": {
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "format": "byte",
              "default": null
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamLicenseSettingsUpdateRequest": {
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "format": "byte",
              "default": null
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamLivenessStrategy": {
          "enum": [
            "OnEachExtractedFace",
            "OnEachIdentifiedFace"
          ],
          "type": "string"
        },
        "EdgeStreamMessagingSettings": {
          "required": [
            "allowEmptyMessages",
            "enable",
            "interval",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
            },
            "interval": {
              "type": "integer",
              "format": "int32"
            },
            "allowEmptyMessages": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamMessagingSettingsCreateRequest": {
          "required": [
            "allowEmptyMessages",
            "enable",
            "interval",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
            },
            "interval": {
              "type": "integer",
              "format": "int32",
              "default": 250
            },
            "allowEmptyMessages": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamMessagingSettingsUpdateRequest": {
          "required": [
            "allowEmptyMessages",
            "enable",
            "interval",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean",
              "default": true
            },
            "strategy": {
              "$ref": "#/components/schemas/EdgeStreamMessagingStrategy"
            },
            "interval": {
              "type": "integer",
              "format": "int32",
              "default": 250
            },
            "allowEmptyMessages": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamMessagingStrategy": {
          "enum": [
            "OnNewAndInterval",
            "OnNewAndIntervalBest"
          ],
          "type": "string"
        },
        "EdgeStreamSettings": {
          "required": [
            "faceDetection",
            "faceExtraction",
            "faceIdentification",
            "faceLivenessPassive",
            "fullFrame",
            "messaging"
          ],
          "type": "object",
          "properties": {
            "faceDetection": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettings"
            },
            "faceExtraction": {
              "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettings"
            },
            "faceLivenessPassive": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettings"
            },
            "faceIdentification": {
              "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettings"
            },
            "messaging": {
              "$ref": "#/components/schemas/EdgeStreamMessagingSettings"
            },
            "fullFrame": {
              "$ref": "#/components/schemas/EdgeStreamFullFrameSettings"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamSettingsCreateRequest": {
          "required": [
            "faceDetection",
            "faceExtraction",
            "faceIdentification",
            "faceLivenessPassive",
            "fullFrame",
            "messaging"
          ],
          "type": "object",
          "properties": {
            "faceDetection": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettingsCreateRequest"
            },
            "faceExtraction": {
              "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettingsCreateRequest"
            },
            "faceLivenessPassive": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettingsCreateRequest"
            },
            "faceIdentification": {
              "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettingsCreateRequest"
            },
            "messaging": {
              "$ref": "#/components/schemas/EdgeStreamMessagingSettingsCreateRequest"
            },
            "fullFrame": {
              "$ref": "#/components/schemas/EdgeStreamFullFrameSettingsCreateRequest"
            },
            "license": {
              "$ref": "#/components/schemas/EdgeStreamLicenseSettingsCreateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamSettingsUpdateRequest": {
          "required": [
            "faceDetection",
            "faceExtraction",
            "faceIdentification",
            "faceLivenessPassive",
            "fullFrame",
            "messaging"
          ],
          "type": "object",
          "properties": {
            "faceDetection": {
              "$ref": "#/components/schemas/EdgeStreamFaceDetectionSettingsUpdateRequest"
            },
            "faceExtraction": {
              "$ref": "#/components/schemas/EdgeStreamFaceExtractionSettingsUpdateRequest"
            },
            "faceLivenessPassive": {
              "$ref": "#/components/schemas/EdgeStreamFaceLivenessPassiveSettingsUpdateRequest"
            },
            "faceIdentification": {
              "$ref": "#/components/schemas/EdgeStreamFaceIdentificationSettingsUpdateRequest"
            },
            "messaging": {
              "$ref": "#/components/schemas/EdgeStreamMessagingSettingsUpdateRequest"
            },
            "fullFrame": {
              "$ref": "#/components/schemas/EdgeStreamFullFrameSettingsUpdateRequest"
            },
            "license": {
              "$ref": "#/components/schemas/EdgeStreamLicenseSettingsUpdateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamSpoofDetectorConfigCreateRequest": {
          "type": "object",
          "properties": {
            "distantLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90,
              "nullable": true
            },
            "nearbyLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90,
              "nullable": true
            },
            "distantLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            },
            "nearbyLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamSpoofDetectorConfigUpdateRequest": {
          "type": "object",
          "properties": {
            "distantLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "nearbyLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "distantLivenessConditions": {
              "type": "string",
              "nullable": true
            },
            "nearbyLivenessConditions": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamUpdateRequest": {
          "required": [
            "clientId",
            "enabled",
            "faceSaveStrategy",
            "id",
            "name",
            "templateGeneratorResourceId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "clientId": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "saveFrameImageData": {
              "type": "boolean",
              "nullable": true
            },
            "templateGeneratorResourceId": {
              "type": "string"
            },
            "faceSaveStrategy": {
              "type": "string"
            },
            "spoofDetectorResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "spoofDetectorConfig": {
              "$ref": "#/components/schemas/EdgeStreamSpoofDetectorConfigUpdateRequest"
            },
            "settings": {
              "$ref": "#/components/schemas/EdgeStreamSettingsUpdateRequest"
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamWatchlistSynchronization": {
          "required": [
            "watchlistSyncOption"
          ],
          "type": "object",
          "properties": {
            "watchlistSyncOption": {
              "type": "string"
            },
            "watchlistIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "EdgeStreamWatchlistSynchronizationRequest": {
          "required": [
            "watchlistSyncOption"
          ],
          "type": "object",
          "properties": {
            "watchlistSyncOption": {
              "type": "string",
              "default": "None"
            },
            "watchlistIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "Face": {
          "required": [
            "age",
            "autolearnClusterType",
            "brightness",
            "createdAt",
            "cropLeftBottomX",
            "cropLeftBottomY",
            "cropLeftTopX",
            "cropLeftTopY",
            "cropRightBottomX",
            "cropRightBottomY",
            "cropRightTopX",
            "cropRightTopY",
            "faceArea",
            "faceAreaChange",
            "faceMaskConfidence",
            "faceMaskStatus",
            "faceOrder",
            "facesOnFrameCount",
            "frameId",
            "gender",
            "glassStatus",
            "heavyFrame",
            "id",
            "imageDataId",
            "leftEyeX",
            "leftEyeY",
            "noseTipConfidence",
            "pitchAngle",
            "processedAt",
            "quality",
            "rightEyeX",
            "rightEyeY",
            "rollAngle",
            "sharpness",
            "size",
            "state",
            "templateQuality",
            "tintedGlasses",
            "trackletId",
            "type",
            "updatedAt",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "trackletId": {
              "type": "string",
              "format": "uuid"
            },
            "quality": {
              "type": "integer",
              "format": "int32"
            },
            "templateQuality": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "state": {
              "$ref": "#/components/schemas/FaceState"
            },
            "imageDataId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "processedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "cropLeftTopX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftTopY": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopX": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopY": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomY": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomY": {
              "type": "number",
              "format": "double"
            },
            "leftEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "leftEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "frameId": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "$ref": "#/components/schemas/FaceType"
            },
            "age": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "gender": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceMaskConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "noseTipConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceMaskStatus": {
              "$ref": "#/components/schemas/FaceMaskStatus"
            },
            "faceArea": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "size": {
              "type": "number",
              "format": "double"
            },
            "faceOrder": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "facesOnFrameCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "faceAreaChange": {
              "type": "number",
              "format": "double"
            },
            "yawAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "pitchAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rollAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "autolearnClusterType": {
              "type": "string",
              "nullable": true
            },
            "sharpness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "brightness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "tintedGlasses": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "heavyFrame": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "glassStatus": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FaceAttributes": {
          "required": [
            "age",
            "brightness",
            "cropLeftBottomX",
            "cropLeftBottomY",
            "cropLeftTopX",
            "cropLeftTopY",
            "cropRightBottomX",
            "cropRightBottomY",
            "cropRightTopX",
            "cropRightTopY",
            "faceArea",
            "faceMaskConfidence",
            "faceMaskStatus",
            "faceOrder",
            "faceSize",
            "gender",
            "glassStatus",
            "heavyFrame",
            "leftEyeX",
            "leftEyeY",
            "noseTipConfidence",
            "pitchAngle",
            "quality",
            "rightEyeX",
            "rightEyeY",
            "rollAngle",
            "sharpness",
            "templateQuality",
            "tintedGlasses",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "cropLeftTopX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftTopY": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopX": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopY": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomY": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomY": {
              "type": "number",
              "format": "double"
            },
            "quality": {
              "type": "integer",
              "format": "int32"
            },
            "leftEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "leftEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "age": {
              "type": "number",
              "format": "double"
            },
            "gender": {
              "$ref": "#/components/schemas/GenderType"
            },
            "faceSize": {
              "type": "number",
              "format": "double"
            },
            "faceMaskConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "noseTipConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceMaskStatus": {
              "$ref": "#/components/schemas/FaceMaskStatus"
            },
            "sharpness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "brightness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "tintedGlasses": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "heavyFrame": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "glassStatus": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "pitchAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "yawAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rollAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceArea": {
              "type": "number",
              "format": "double"
            },
            "templateQuality": {
              "type": "integer",
              "format": "int32"
            },
            "faceOrder": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "FaceDetectorConfig": {
          "type": "object",
          "properties": {
            "minFaceSize": {
              "type": "integer",
              "format": "int32",
              "default": 35
            },
            "maxFaceSize": {
              "type": "integer",
              "format": "int32",
              "default": 600
            },
            "maxFaces": {
              "type": "integer",
              "format": "int32",
              "default": 20
            },
            "confidenceThreshold": {
              "type": "integer",
              "format": "int32",
              "default": 450
            }
          },
          "additionalProperties": false
        },
        "FaceFeaturesConfig": {
          "required": [
            "age",
            "brightness",
            "faceMask",
            "gender",
            "glassStatus",
            "heavyFrame",
            "noseTip",
            "pitchAngle",
            "rollAngle",
            "sharpness",
            "tintedGlasses",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "age": {
              "type": "boolean",
              "default": true
            },
            "gender": {
              "type": "boolean",
              "default": true
            },
            "faceMask": {
              "type": "boolean",
              "default": true
            },
            "noseTip": {
              "type": "boolean",
              "default": true
            },
            "yawAngle": {
              "type": "boolean",
              "default": true
            },
            "pitchAngle": {
              "type": "boolean",
              "default": true
            },
            "rollAngle": {
              "type": "boolean",
              "default": true
            },
            "sharpness": {
              "type": "boolean",
              "default": true
            },
            "brightness": {
              "type": "boolean",
              "default": true
            },
            "tintedGlasses": {
              "type": "boolean",
              "default": true
            },
            "heavyFrame": {
              "type": "boolean",
              "default": true
            },
            "glassStatus": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "FaceFeaturesConfigFeaturesConfig": {
          "required": [
            "faceFeaturesConfig"
          ],
          "type": "object",
          "properties": {
            "faceFeaturesConfig": {
              "$ref": "#/components/schemas/FaceFeaturesConfig"
            }
          },
          "additionalProperties": false
        },
        "FaceMaskConfidenceRequest": {
          "required": [
            "faceMaskThreshold"
          ],
          "type": "object",
          "properties": {
            "faceMaskThreshold": {
              "type": "number",
              "format": "double",
              "default": 3000
            }
          },
          "additionalProperties": false
        },
        "FaceMaskStatus": {
          "enum": [
            "Unknown",
            "Mask",
            "NoMask"
          ],
          "type": "string"
        },
        "FacePagedCollection": {
          "required": [
            "items",
            "nextPage",
            "pageNumber",
            "pageSize",
            "previousPage",
            "totalItemsCount"
          ],
          "type": "object",
          "properties": {
            "totalItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Face"
              }
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            },
            "pageNumber": {
              "type": "integer",
              "format": "int32"
            },
            "previousPage": {
              "type": "string",
              "nullable": true
            },
            "nextPage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FaceProbe": {
          "required": [
            "image"
          ],
          "type": "object",
          "properties": {
            "image": {
              "$ref": "#/components/schemas/ImageData"
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceSearchDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "templateGeneratorResourceId": {
              "type": "string",
              "default": "cpu"
            }
          },
          "additionalProperties": false
        },
        "FaceSearchDetectorConfig": {
          "type": "object",
          "properties": {
            "minFaceSize": {
              "type": "integer",
              "format": "int32",
              "default": 35
            },
            "maxFaceSize": {
              "type": "integer",
              "format": "int32",
              "default": 600
            },
            "confidenceThreshold": {
              "type": "integer",
              "format": "int32",
              "default": 450
            }
          },
          "additionalProperties": false
        },
        "FaceSearchRequest": {
          "required": [
            "image"
          ],
          "type": "object",
          "properties": {
            "image": {
              "$ref": "#/components/schemas/ImageData"
            },
            "threshold": {
              "type": "integer",
              "format": "int32",
              "default": 30
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceSearchDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "templateGeneratorResourceId": {
              "type": "string",
              "default": "cpu"
            }
          },
          "additionalProperties": false
        },
        "FaceState": {
          "enum": [
            "New",
            "Extracting",
            "Extracted",
            "Error"
          ],
          "type": "string"
        },
        "FaceType": {
          "enum": [
            "Regular",
            "AutoLearn"
          ],
          "type": "string"
        },
        "FaceWatchlistMemberLinkingRequest": {
          "required": [
            "faceId"
          ],
          "type": "object",
          "properties": {
            "faceId": {
              "type": "string",
              "format": "uuid"
            }
          },
          "additionalProperties": false
        },
        "FaceWatchlistMemberRemoveRequest": {
          "required": [
            "faceId"
          ],
          "type": "object",
          "properties": {
            "faceId": {
              "type": "string",
              "format": "uuid"
            }
          },
          "additionalProperties": false
        },
        "FailReason": {
          "type": "object",
          "properties": {
            "reasonMessage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FeaturesConfigUpdateRequest": {
          "required": [
            "age",
            "faceMask",
            "gender",
            "noseTip",
            "pitchAngle",
            "rollAngle",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "age": {
              "type": "boolean",
              "default": true
            },
            "gender": {
              "type": "boolean",
              "default": true
            },
            "faceMask": {
              "type": "boolean",
              "default": true
            },
            "noseTip": {
              "type": "boolean",
              "default": true
            },
            "yawAngle": {
              "type": "boolean",
              "default": true
            },
            "pitchAngle": {
              "type": "boolean",
              "default": true
            },
            "rollAngle": {
              "type": "boolean",
              "default": true
            },
            "sharpness": {
              "type": "boolean",
              "default": true,
              "nullable": true
            },
            "brightness": {
              "type": "boolean",
              "default": true,
              "nullable": true
            },
            "tintedGlasses": {
              "type": "boolean",
              "default": true,
              "nullable": true
            },
            "heavyFrame": {
              "type": "boolean",
              "default": true,
              "nullable": true
            },
            "glassStatus": {
              "type": "boolean",
              "default": true,
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FeaturesConfigUpdateRequestFeaturesConfig": {
          "required": [
            "faceFeaturesConfig"
          ],
          "type": "object",
          "properties": {
            "faceFeaturesConfig": {
              "$ref": "#/components/schemas/FeaturesConfigUpdateRequest"
            }
          },
          "additionalProperties": false
        },
        "Frame": {
          "required": [
            "createdAt",
            "id",
            "imageDataId",
            "positionInMs",
            "receivedAt",
            "state",
            "updatedAt"
          ],
          "type": "object",
          "properties": {
            "state": {
              "$ref": "#/components/schemas/FrameState"
            },
            "imageDataId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "receivedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "positionInMs": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FramePagedCollection": {
          "required": [
            "items",
            "nextPage",
            "pageNumber",
            "pageSize",
            "previousPage",
            "totalItemsCount"
          ],
          "type": "object",
          "properties": {
            "totalItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Frame"
              }
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            },
            "pageNumber": {
              "type": "integer",
              "format": "int32"
            },
            "previousPage": {
              "type": "string",
              "nullable": true
            },
            "nextPage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "FrameState": {
          "enum": [
            "New",
            "Processing",
            "Processed",
            "Error"
          ],
          "type": "string"
        },
        "GenderType": {
          "enum": [
            "Male",
            "Female"
          ],
          "type": "string"
        },
        "ImageData": {
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "type": "string",
              "format": "byte",
              "default": ""
            }
          },
          "additionalProperties": false
        },
        "Label": {
          "type": "object",
          "properties": {
            "key": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "nullable": true
            },
            "value": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "LivenessSpoofCheck": {
          "type": "object",
          "properties": {
            "performed": {
              "type": "boolean"
            },
            "passed": {
              "type": "boolean"
            },
            "score": {
              "type": "number",
              "format": "double"
            },
            "notPerformedReasons": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FailReason"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "PreviewConfig": {
          "required": [
            "faceBoundingBoxColor",
            "pedestrianBoundingBoxColor"
          ],
          "type": "object",
          "properties": {
            "faceBoundingBoxColor": {
              "type": "string"
            },
            "pedestrianBoundingBoxColor": {
              "type": "string"
            },
            "objectBoundingBoxColor": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "ProblemDetails": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "nullable": true
            },
            "title": {
              "type": "string",
              "nullable": true
            },
            "status": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "detail": {
              "type": "string",
              "nullable": true
            },
            "instance": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": { }
        },
        "RegisterWatchlistMemberRequest": {
          "required": [
            "id",
            "images",
            "watchlistIds"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "default": ""
            },
            "images": {
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RegistrationImageData"
              }
            },
            "watchlistIds": {
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "sample_watchlist_id"
              ]
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "templateGeneratorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "keepAutoLearnPhotos": {
              "type": "boolean",
              "default": false
            },
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "type": "string",
              "nullable": true
            },
            "note": {
              "type": "string",
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              },
              "default": null,
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "RegistrationImageData": {
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "faceId": {
              "type": "string",
              "format": "uuid",
              "default": null,
              "nullable": true
            },
            "data": {
              "type": "string",
              "format": "byte",
              "default": ""
            }
          },
          "additionalProperties": false
        },
        "SearchByImageMatchResult": {
          "required": [
            "displayName",
            "fullName",
            "labels",
            "previewColor",
            "score",
            "watchlistDisplayName",
            "watchlistFullName",
            "watchlistId",
            "watchlistMemberId"
          ],
          "type": "object",
          "properties": {
            "score": {
              "type": "integer",
              "format": "int32"
            },
            "watchlistMemberId": {
              "type": "string",
              "nullable": true
            },
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "type": "string",
              "nullable": true
            },
            "watchlistDisplayName": {
              "type": "string"
            },
            "watchlistFullName": {
              "type": "string"
            },
            "watchlistId": {
              "type": "string",
              "nullable": true
            },
            "previewColor": {
              "type": "string"
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              }
            }
          },
          "additionalProperties": false
        },
        "SearchByImageSpoofResult": {
          "type": "object",
          "properties": {
            "performed": {
              "type": "boolean"
            },
            "passed": {
              "type": "boolean"
            },
            "distantLivenessSpoofCheck": {
              "$ref": "#/components/schemas/WatchlistLivenessSpoofCheck"
            },
            "nearbyLivenessSpoofCheck": {
              "$ref": "#/components/schemas/WatchlistLivenessSpoofCheck"
            }
          },
          "additionalProperties": false
        },
        "SearchInFacesResponse": {
          "required": [
            "searchSessionId"
          ],
          "type": "object",
          "properties": {
            "searchSessionId": {
              "type": "string",
              "format": "uuid"
            }
          },
          "additionalProperties": false
        },
        "SearchInWatchlistRequest": {
          "required": [
            "image"
          ],
          "type": "object",
          "properties": {
            "image": {
              "$ref": "#/components/schemas/ImageData"
            },
            "watchlistIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "sample_watchlist_id"
              ],
              "nullable": true
            },
            "threshold": {
              "type": "integer",
              "format": "int32",
              "default": 40
            },
            "maxResultCount": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "templateGeneratorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "faceMaskConfidenceRequest": {
              "$ref": "#/components/schemas/FaceMaskConfidenceRequest"
            },
            "faceFeaturesConfig": {
              "$ref": "#/components/schemas/WatchlistSearchFaceFeaturesRequestConfig"
            },
            "spoofDetectorResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "none"
              ]
            },
            "spoofCheckConfig": {
              "$ref": "#/components/schemas/WatchlistSpoofCheckConfig"
            }
          },
          "additionalProperties": false
        },
        "SearchInWatchlistResponse": {
          "required": [
            "age",
            "brightness",
            "cropLeftBottomX",
            "cropLeftBottomY",
            "cropLeftTopX",
            "cropLeftTopY",
            "cropRightBottomX",
            "cropRightBottomY",
            "cropRightTopX",
            "cropRightTopY",
            "faceArea",
            "faceMaskConfidence",
            "faceMaskStatus",
            "faceOrder",
            "faceSize",
            "gender",
            "glassStatus",
            "heavyFrame",
            "leftEyeX",
            "leftEyeY",
            "matchResults",
            "noseTipConfidence",
            "pitchAngle",
            "quality",
            "rightEyeX",
            "rightEyeY",
            "rollAngle",
            "sharpness",
            "spoofCheckResult",
            "templateQuality",
            "tintedGlasses",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "matchResults": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchByImageMatchResult"
              }
            },
            "spoofCheckResult": {
              "$ref": "#/components/schemas/SearchByImageSpoofResult"
            },
            "cropLeftTopX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftTopY": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopX": {
              "type": "number",
              "format": "double"
            },
            "cropRightTopY": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropLeftBottomY": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomX": {
              "type": "number",
              "format": "double"
            },
            "cropRightBottomY": {
              "type": "number",
              "format": "double"
            },
            "quality": {
              "type": "integer",
              "format": "int32"
            },
            "leftEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "leftEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeX": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rightEyeY": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "age": {
              "type": "number",
              "format": "double"
            },
            "gender": {
              "$ref": "#/components/schemas/GenderType"
            },
            "faceSize": {
              "type": "number",
              "format": "double"
            },
            "faceMaskConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "noseTipConfidence": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceMaskStatus": {
              "$ref": "#/components/schemas/FaceMaskStatus"
            },
            "sharpness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "brightness": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "tintedGlasses": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "heavyFrame": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "glassStatus": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "pitchAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "yawAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "rollAngle": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "faceArea": {
              "type": "number",
              "format": "double"
            },
            "templateQuality": {
              "type": "integer",
              "format": "int32"
            },
            "faceOrder": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        "SearchSessionsCleanupConfig": {
          "required": [
            "enabled",
            "interval",
            "maxItemsCount",
            "maxSessionAge"
          ],
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "maxItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "maxSessionAge": {
              "type": "string",
              "format": "date-span",
              "nullable": true
            },
            "interval": {
              "type": "string",
              "format": "date-span",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "SpoofCheckConfig": {
          "type": "object",
          "properties": {
            "distantLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90
            },
            "nearbyLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90
            },
            "distantLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            },
            "nearbyLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            },
            "keepEvaluatingConditionsAfterFirstFail": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "SpoofCheckRequest": {
          "required": [
            "image"
          ],
          "type": "object",
          "properties": {
            "image": {
              "$ref": "#/components/schemas/ImageData"
            },
            "faceDetectorConfig": {
              "$ref": "#/components/schemas/FaceSearchDetectorConfig"
            },
            "faceDetectorResourceId": {
              "type": "string",
              "default": "cpu"
            },
            "spoofDetectorResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "liveness_distant_cpu_remote"
              ]
            },
            "spoofCheckConfig": {
              "$ref": "#/components/schemas/SpoofCheckConfig"
            }
          },
          "additionalProperties": false
        },
        "SpoofCheckResponse": {
          "type": "object",
          "properties": {
            "performed": {
              "type": "boolean"
            },
            "passed": {
              "type": "boolean"
            },
            "distantLivenessSpoofCheck": {
              "$ref": "#/components/schemas/LivenessSpoofCheck"
            },
            "nearbyLivenessSpoofCheck": {
              "$ref": "#/components/schemas/LivenessSpoofCheck"
            }
          },
          "additionalProperties": false
        },
        "SpoofDetectorConfig": {
          "required": [
            "distantLivenessConditions",
            "distantLivenessScoreThreshold",
            "nearbyLivenessConditions",
            "nearbyLivenessScoreThreshold"
          ],
          "type": "object",
          "properties": {
            "distantLivenessScoreThreshold": {
              "type": "number",
              "format": "double"
            },
            "nearbyLivenessScoreThreshold": {
              "type": "number",
              "format": "double"
            },
            "distantLivenessConditions": {
              "type": "string"
            },
            "nearbyLivenessConditions": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Tracklet": {
          "required": [
            "createdAt",
            "id",
            "timeAppeared",
            "timeAppearedRelativeMs",
            "timeDisappeared",
            "timeDisappearedRelativeMs",
            "updatedAt"
          ],
          "type": "object",
          "properties": {
            "timeAppeared": {
              "type": "string",
              "format": "date-time"
            },
            "timeDisappeared": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "timeAppearedRelativeMs": {
              "type": "integer",
              "format": "int64"
            },
            "timeDisappearedRelativeMs": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "TrackletPagedCollection": {
          "required": [
            "items",
            "nextPage",
            "pageNumber",
            "pageSize",
            "previousPage",
            "totalItemsCount"
          ],
          "type": "object",
          "properties": {
            "totalItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tracklet"
              }
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            },
            "pageNumber": {
              "type": "integer",
              "format": "int32"
            },
            "previousPage": {
              "type": "string",
              "nullable": true
            },
            "nextPage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "VerificationRequest": {
          "required": [
            "probeImage",
            "referenceImage"
          ],
          "type": "object",
          "properties": {
            "probeImage": {
              "$ref": "#/components/schemas/FaceProbe"
            },
            "referenceImage": {
              "$ref": "#/components/schemas/FaceProbe"
            }
          },
          "additionalProperties": false
        },
        "VerificationResponse": {
          "type": "object",
          "properties": {
            "confidence": {
              "type": "number",
              "format": "double"
            },
            "probeFaceDetails": {
              "$ref": "#/components/schemas/FaceAttributes"
            },
            "referenceFaceDetails": {
              "$ref": "#/components/schemas/FaceAttributes"
            }
          },
          "additionalProperties": false
        },
        "VersionInfo": {
          "required": [
            "assemblyLastModifiedTime",
            "assemblyVersion",
            "databaseVersion",
            "databaseVersionCreationTime",
            "databaseVersionUpdatedTime",
            "fullVersion"
          ],
          "type": "object",
          "properties": {
            "databaseVersion": {
              "type": "string"
            },
            "databaseVersionCreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "databaseVersionUpdatedTime": {
              "type": "string",
              "format": "date-time"
            },
            "assemblyVersion": {
              "type": "string"
            },
            "assemblyLastModifiedTime": {
              "type": "string",
              "format": "date-time"
            },
            "fullVersion": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "VideoDataStorageConfig": {
          "required": [
            "storageMode"
          ],
          "type": "object",
          "properties": {
            "storageMode": {
              "$ref": "#/components/schemas/VideoDataStorageMode"
            }
          },
          "additionalProperties": false
        },
        "VideoDataStorageMode": {
          "enum": [
            "None",
            "All"
          ],
          "type": "string"
        },
        "Watchlist": {
          "required": [
            "createdAt",
            "displayName",
            "fullName",
            "id",
            "previewColor",
            "threshold",
            "updatedAt"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "type": "string"
            },
            "fullName": {
              "type": "string"
            },
            "threshold": {
              "type": "integer",
              "format": "int32"
            },
            "previewColor": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistAutoLearnConfig": {
          "required": [
            "enabled",
            "executionStartTime",
            "maxAutoLearnFacesCount",
            "selectionThreshold"
          ],
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "executionStartTime": {
              "type": "string",
              "format": "date-span",
              "nullable": true
            },
            "maxAutoLearnFacesCount": {
              "type": "integer",
              "format": "int32"
            },
            "selectionThreshold": {
              "type": "integer",
              "format": "int32"
            },
            "maskedSelectionThreshold": {
              "type": "integer",
              "format": "int32"
            },
            "noFaceMaskConfidenceThreshold": {
              "type": "number",
              "format": "double"
            },
            "faceMaskConfidenceThreshold": {
              "type": "number",
              "format": "double"
            }
          },
          "additionalProperties": false
        },
        "WatchlistCreateRequest": {
          "required": [
            "displayName",
            "fullName"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string"
            },
            "fullName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string"
            },
            "threshold": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            },
            "previewColor": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistLivenessSpoofCheck": {
          "type": "object",
          "properties": {
            "performed": {
              "type": "boolean"
            },
            "passed": {
              "type": "boolean"
            },
            "score": {
              "type": "number",
              "format": "double"
            },
            "notPerformedReasons": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FailReason"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMember": {
          "required": [
            "createdAt",
            "displayName",
            "fullName",
            "id",
            "labels",
            "note",
            "updatedAt"
          ],
          "type": "object",
          "properties": {
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "type": "string",
              "nullable": true
            },
            "note": {
              "type": "string",
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              }
            },
            "id": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMemberCreateRequest": {
          "type": "object",
          "properties": {
            "displayName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string",
              "nullable": true
            },
            "note": {
              "type": "string",
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMemberPagedCollection": {
          "required": [
            "items",
            "nextPage",
            "pageNumber",
            "pageSize",
            "previousPage",
            "totalItemsCount"
          ],
          "type": "object",
          "properties": {
            "totalItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WatchlistMember"
              }
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            },
            "pageNumber": {
              "type": "integer",
              "format": "int32"
            },
            "previousPage": {
              "type": "string",
              "nullable": true
            },
            "nextPage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMemberUpsertRequest": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "displayName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string",
              "nullable": true
            },
            "note": {
              "type": "string",
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              },
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMemberWithRelatedData": {
          "required": [
            "createdAt",
            "displayName",
            "faces",
            "fullName",
            "id",
            "labels",
            "note",
            "updatedAt",
            "watchlists"
          ],
          "type": "object",
          "properties": {
            "watchlists": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Watchlist"
              }
            },
            "faces": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Face"
              }
            },
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "fullName": {
              "type": "string",
              "nullable": true
            },
            "note": {
              "type": "string",
              "nullable": true
            },
            "labels": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Label"
              }
            },
            "id": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistMembersLinkRequest": {
          "required": [
            "watchlistId",
            "watchlistMembersIds"
          ],
          "type": "object",
          "properties": {
            "watchlistId": {
              "type": "string"
            },
            "watchlistMembersIds": {
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "WatchlistPagedCollection": {
          "required": [
            "items",
            "nextPage",
            "pageNumber",
            "pageSize",
            "previousPage",
            "totalItemsCount"
          ],
          "type": "object",
          "properties": {
            "totalItemsCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Watchlist"
              }
            },
            "pageSize": {
              "type": "integer",
              "format": "int32"
            },
            "pageNumber": {
              "type": "integer",
              "format": "int32"
            },
            "previousPage": {
              "type": "string",
              "nullable": true
            },
            "nextPage": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistSearchFaceFeaturesRequestConfig": {
          "required": [
            "age",
            "faceMask",
            "gender",
            "noseTip",
            "pitchAngle",
            "rollAngle",
            "yawAngle"
          ],
          "type": "object",
          "properties": {
            "age": {
              "type": "boolean",
              "default": true
            },
            "gender": {
              "type": "boolean",
              "default": true
            },
            "faceMask": {
              "type": "boolean",
              "default": true
            },
            "noseTip": {
              "type": "boolean",
              "default": true
            },
            "yawAngle": {
              "type": "boolean",
              "default": true
            },
            "pitchAngle": {
              "type": "boolean",
              "default": true
            },
            "rollAngle": {
              "type": "boolean",
              "default": true
            },
            "sharpness": {
              "type": "boolean",
              "default": true
            },
            "brightness": {
              "type": "boolean",
              "default": true
            },
            "tintedGlasses": {
              "type": "boolean",
              "default": true
            },
            "heavyFrame": {
              "type": "boolean",
              "default": true
            },
            "glassStatus": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        },
        "WatchlistSpoofCheckConfig": {
          "type": "object",
          "properties": {
            "distantLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90
            },
            "nearbyLivenessScoreThreshold": {
              "type": "number",
              "format": "double",
              "default": 90
            },
            "distantLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            },
            "nearbyLivenessConditions": {
              "type": "string",
              "default": "default",
              "nullable": true
            },
            "keepEvaluatingConditionsAfterFirstFail": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        },
        "WatchlistUpsertRequest": {
          "required": [
            "displayName",
            "fullName",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "displayName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string"
            },
            "fullName": {
              "maxLength": 200,
              "minLength": 0,
              "type": "string"
            },
            "threshold": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            },
            "previewColor": {
              "type": "string",
              "nullable": true
            }
          },
          "additionalProperties": false
        }
      },
      "securitySchemes": {
        "oauth2": {
          "type": "oauth2",
          "flows": {
            "clientCredentials": {
              "tokenUrl": "https://smartface-guard.eu.auth0.com/oauth/token",
              "scopes": { }
            },
            "authorizationCode": {
              "authorizationUrl": "https://smartface-guard.eu.auth0.com/authorize",
              "tokenUrl": "https://smartface-guard.eu.auth0.com/oauth/token",
              "scopes": { }
            }
          }
        },
        "bearerAuth": {
          "type": "http",
          "description": "JWT Authorization header using the Bearer scheme.",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "oauth2": [ ],
        "bearerAuth": [ ]
      }
    ]
  }